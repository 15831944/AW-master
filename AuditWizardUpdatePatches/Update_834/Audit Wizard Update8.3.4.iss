; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "AuditWizard v8 Update 8.3.4"
#define MyAppVerName "AuditWizard 8.3.4 Update"
#define MyAppPublisher "Layton Technology, Inc."

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{0A79B0A6-FD38-4420-8828-89B3000ABF48}
AppName={#MyAppName}
AppVerName={#MyAppVerName}
AppPublisher={#MyAppPublisher}
DefaultDirName={code:GetInstallationDirectory}
OutputBaseFilename=AuditWizard_8.3.4
Compression=lzma
SolidCompression=yes
DisableDirPage=yes
CreateAppDir=no


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "bin\Layton.AuditWizard.Administration.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Layton.AuditWizard.Common.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Layton.AuditWizard.DataAccess.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Layton.AuditWizard.Overview.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Layton.AuditWizard.Reports.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Layton.NetworkDiscovery.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Layton.AuditWizard.Network.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\AuditWizardv8.exe"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\AuditAgent.exe"; DestDir: "{code:GetInstallationDirectory}\AuditAgent"; Flags: ignoreversion
Source: "bin\AuditScanner.exe"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Layton.AuditWizard.Applications.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Layton.AuditWizard.AuditTrail.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Layton.Common.Controls.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Layton.Cab.Interface.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion

Source: "bin\Infragistics.Practices.CompositeUI.WinForms.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics3.Win.UltraWinGrid.WordWriter.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics3.Win.UltraWinGrid.ExcelExport.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics3.Win.UltraWinFormattedText.WordWriter.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics3.Documents.Word.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics3.Documents.IO.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics3.Documents.Excel.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics3.Documents.Core.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.v11.1.Design.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinTree.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinToolbars.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinTabControl.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinTabbedMdi.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinStatusBar.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinSpellChecker.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinSchedule.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinPrintPreviewDialog.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinMaskedEdit.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinListView.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinListBar.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinInkProvider.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinInkProvider.Ink17.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinGrid.WordWriter.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinGrid.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinGrid.ExcelExport.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinGrid.DocumentExport.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinGauge.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinGanttView.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinFormattedText.WordWriter.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinExplorerBar.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinEditors.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinDock.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinDataSource.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinChart.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinCalcManager.v11.1.FormulaBuilder.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraWinCalcManager.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraGauge.v11.1.Design.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.UltraChart.v11.1.Design.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.SupportDialogs.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.Misc.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Win.AppStylistSupport.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Shared.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Math.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Documents.Word.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Documents.Reports.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Documents.IO.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Documents.Excel.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\Infragistics2.Documents.Core.v11.1.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion

Source: "bin\CreateDatabase.sql"; DestDir: "{code:GetInstallationDirectory}\db"; Flags: ignoreversion; check: IsDataBaseUpgradationrequired
Source: "bin\CreateStoredProcedures.sql"; DestDir: "{code:GetInstallationDirectory}\db"; Flags: ignoreversion; check: IsDataBaseUpgradationrequired
Source: "bin\addedprocedures.sql"; DestDir: "{code:GetInstallationDirectory}\db"; Flags: ignoreversion; check: IsDataBaseUpgradationrequired
Source: "bin\DBUtility.exe"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion; check: IsDataBaseUpgradationrequired
Source: "bin\advapi32.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: dontcopy
Source: "bin\psvince.dll"; Flags: dontcopy
Source: "bin\AuditWizardv8.XmlSerializers.dll"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\appAboutScreen.png"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion
Source: "bin\appSplashScreen.png"; DestDir: "{code:GetInstallationDirectory}"; Flags: ignoreversion

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Code]

type
	SERVICE_STATUS = record
    	dwServiceType				      : cardinal;
    	dwCurrentState			      : cardinal;
    	dwControlsAccepted			  : cardinal;
    	dwWin32ExitCode				    : cardinal;
    	dwServiceSpecificExitCode	: cardinal;
    	dwCheckPoint				      : cardinal;
    	dwWaitHint					      : cardinal;
	end;
	HANDLE = cardinal;

const
  SQLDMOGrowth_MB = 0;
  SERVICE_QUERY_STATUS = $4;
  SERVICE_RUNNING = $4;
  SC_MANAGER_ALL_ACCESS		= $f003f;
  SERVICE_ALL_ACCESS			= $f01ff;
  SERVICE_START = $10;
 	SERVICE_STOP				= $20;
	SERVICE_CONTROL_STOP		= $1;
	SERVICE_AUTO_START          = $2;
	
	//
  // No change constant
  //
  SERVICE_NO_CHANGE = $FFFFFFFF;


var
  InstallLocationAWPage: TInputDirWizardPage;
  DataDir: String;
  bStartService,bShowInstLocPage: Boolean;
  
  function OpenSCManager(lpMachineName, lpDatabaseName: string; dwDesiredAccess :cardinal): HANDLE;
  external 'OpenSCManagerA@advapi32.dll stdcall';

  function OpenService(hSCManager :HANDLE;lpServiceName: string; dwDesiredAccess :cardinal): HANDLE;
  external 'OpenServiceA@advapi32.dll stdcall';

  function CloseServiceHandle(hSCObject :HANDLE): boolean;
  external 'CloseServiceHandle@advapi32.dll stdcall';

  function QueryServiceStatus(hService :HANDLE;var ServiceStatus :SERVICE_STATUS) : boolean;
  external 'QueryServiceStatus@advapi32.dll stdcall';

  function StartNTService(hService :HANDLE;dwNumServiceArgs : cardinal;lpServiceArgVectors : cardinal) : boolean;
  external 'StartServiceA@advapi32.dll stdcall';

  function ControlService(hService :HANDLE; dwControl :cardinal;var ServiceStatus :SERVICE_STATUS) : boolean;
  external 'ControlService@advapi32.dll stdcall';
  
  function IsModuleLoaded(modulename: String ): Boolean;
  external 'IsModuleLoaded@files:psvince.dll stdcall';


  function ChangeServiceConfig(
  hService: Longword;
  dwServiceType: Longword;
  dwStartType: Longword;
  dwErrorControl: Longword;
  lpBinaryPathName: PChar;
  lpLoadOrderGroup: PChar;
  lpdwTagId: Longword;
  lpDependencies: PChar;
  lpServiceStartName: PChar;
  lpPassword: PChar;
  lpDisplayName: PChar): Longword;
  external 'ChangeServiceConfigA@advapi32.dll stdcall';

  function OpenServiceManager() : HANDLE;
  begin 	
		Result := OpenSCManager('','ServicesActive',SC_MANAGER_ALL_ACCESS); 		
  end;
  
  function IsDataBaseUpgradationrequired():Boolean;
    begin
      Result:= bShowInstLocPage;
    end;


{Checks whether a specified service is running.}
function IsServiceRunning(ServiceName: string) : boolean;
  var
	 hSCM	: HANDLE;
	 hService: HANDLE;
	 Status	: SERVICE_STATUS;
  begin
	 hSCM := OpenServiceManager();
	 Result := false;
	 if hSCM <> 0 then
    begin
		  hService := OpenService(hSCM,ServiceName,SERVICE_QUERY_STATUS);
    	if hService <> 0 then
      begin
			 if QueryServiceStatus(hService,Status) then
        begin
				  Result :=(Status.dwCurrentState = SERVICE_RUNNING)
        end;
       CloseServiceHandle(hService)
		  end;
      CloseServiceHandle(hSCM)
	  end
  end;
  
  {Stops a specified service}
function StopService(ServiceName: string) : boolean;
  var
	   hSCM	: HANDLE;
	   hService: HANDLE;
	   Status	: SERVICE_STATUS;
  begin
	   hSCM := OpenServiceManager();
	   Result := false;
	   if hSCM <> 0 then
     begin
        hService := OpenService(hSCM,ServiceName,SERVICE_STOP);
        if hService <> 0 then
        begin
          Result := ControlService(hService,SERVICE_CONTROL_STOP,Status);
          CloseServiceHandle(hService)
		    end;
      CloseServiceHandle(hSCM)
	   end;
  end;
  
procedure StopAuditWizardService();
  begin
    bStartService:=IsServiceRunning('AuditWizardService');
    if(bStartService)then
    StopService('AuditWizardService');
  end;
  
{Starts a specified service}
function StartService(ServiceName: string) : boolean;
  var
	   hSCM	: HANDLE;
	   hService: HANDLE;
  begin
	   hSCM := OpenServiceManager();
	   Result := false;
	   if hSCM <> 0 then
     begin
		    hService := OpenService(hSCM,ServiceName,SERVICE_START);
        if hService <> 0 then
        begin
          Result := StartNTService(hService,0,0);
          CloseServiceHandle(hService)
		    end;
        CloseServiceHandle(hSCM)
	   end;
  end;
  
procedure StartAuditWizardService();
  begin
    if(bStartService)then
    StartService('AuditWizardService');
  end;

function GetTheInstalledVersionOfAW():string;
  var
    strVersion: String;
  begin
    if RegQueryStringValue(HKLM, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{0A79B0A6-FD38-4420-8828-89B3000ABF48}',
     'DisplayVersion', strVersion) then
    begin
      // Successfully read the value
      //MsgBox('Version: ' + strVersion, mbInformation, MB_OK);
      Result:= strVersion;
    end;
  end;

procedure InitializeWizard;
  begin


    // Create the page
    InstallLocationAWPage := CreateInputDirPage(wpWelcome,
    'Select the AuditWizard Install Location', 'Where you installed the previous version of AuditWizard?',
    'Update will be applied to the selected folder.'#13#10#13#10 +
    'To continue, click Next. If you would like to select a different folder, click Browse.',
    False, '');

    // Add item (with an empty caption)
    InstallLocationAWPage.Add('');

    // Set initial value (optional)
    InstallLocationAWPage.Values[0] := ExpandConstant('{pf}\AuditWizard v8');


  end;

//For setting the app path(installation directory)from code
function GetInstallationDirectory(Param: string): String;
  var
    strInstallLocation: string;
  begin
    if RegQueryStringValue(HKLM, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{0A79B0A6-FD38-4420-8828-89B3000ABF48}','InstallLocation', strInstallLocation) then
      begin
        if ( strInstallLocation='') then
          begin
            bShowInstLocPage:=True;
            Result:=DataDir;
          end
        else
          begin
            bShowInstLocPage:=False;
            Result:= strInstallLocation;
          end;
      end

  end;
  
//For checking Aw Installed

function IsAwInstalled():Boolean;
  begin
    Result:=RegKeyExists(HKLM, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{0A79B0A6-FD38-4420-8828-89B3000ABF48}');
  end;

function InitializeSetup(): Boolean;
  var
    strVersion,strInstDir: string;
  begin
    if (not IsAwInstalled) then
      begin
        MsgBox('There does not appear to be a copy of AuditWizard installed on this PC.' , mbInformation, MB_OK);
        Result:= False;
      end
    else
    begin
      Result:=True;
      strVersion:=GetTheInstalledVersionOfAW();
      if not((strVersion ='8.3.0') or (strVersion ='8.3.1') or (strVersion ='8.3.2') or (strVersion ='8.3.3') or (strVersion ='8.3.3.1') or (strVersion='8.3.31') or (strVersion='8.3.3.2') or (strVersion='8.3.4')) then
        begin
          MsgBox('The installed version of Audit Wizard is: ' + strVersion+#13'This update is for 8.3.0 or later' , mbInformation, MB_OK);
          Result:=False;
        end

      else if(Not IsModuleLoaded( 'AuditWizardv8.exe' )) then
        begin
          //MsgBox('Application is not running', mbInformation, MB_OK);
          StopAuditWizardService();
          strInstDir:=GetInstallationDirectory(strInstDir);
          Result := true;
        end
      else
        begin
          MsgBox('Audit Wizard is running Please close the application and try again', mbInformation, MB_OK);
          Result := false;
        end
    end
  end;
function CheckForAuditWizardExe():Boolean;
  begin
    Result:=FileOrDirExists( DataDir+'\AuditWizardv8.exe');
  end;
  
function NextButtonClick(CurPageID: Integer): Boolean;
  begin
    Result:=True;
    if (CurPageID =InstallLocationAWPage.ID) then
      begin
        // Read value into variable
        DataDir := InstallLocationAWPage.Values[0];
        if not(CheckForAuditWizardExe) then
          begin
            MsgBox('The Selected location is not valid, select the proper location.' , mbInformation, MB_OK)
            Result:=False;
          end
      end
  end;

procedure CurStepChanged(CurStep: TSetupStep);
  var
    ResultCode: Integer;
  begin
    if (CurStep=ssDone )then
      begin
        if (bShowInstLocPage) then
          begin
            ShellExec('open',DataDir+'\DBUtility.exe','','',SW_HIDE,ewWaitUntilTerminated,ResultCode);
          end;
        StartAuditWizardService();
      end
  end;
  
  //  Skip pages that shouldn't be shown
function ShouldSkipPage(PageID: Integer): Boolean;
  begin
    if ((PageID = InstallLocationAWPage.ID)and (not bShowInstLocPage)) then
      begin
        Result := True;
      end
    else
      begin
        Result := False;
      end
  end;


  


  




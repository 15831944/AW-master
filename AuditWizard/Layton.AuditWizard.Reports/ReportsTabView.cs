using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text.RegularExpressions;
//
using Infragistics.UltraChart.Shared.Styles;
using Infragistics.Shared;
using Infragistics.Win;
using Infragistics.Win.UltraWinChart;
using Infragistics.Win.UltraWinDock;
using Infragistics.Win.UltraWinGrid;
using Infragistics.Documents.Reports.Report;
//
using Layton.AuditWizard.Common;
using Layton.AuditWizard.DataAccess;
using Layton.AuditWizard.Network;
using Layton.Cab.Interface;
//
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;

namespace Layton.AuditWizard.Reports
{
    [SmartPart]
    public partial class ReportsTabView : UserControl, ILaytonView
    {
        #region data

        protected static string defaultSubHeading = "[DATETIME]  [AUTHOR] : Generated by AuditWizard from Layton Technology, Inc.";
        protected static string defaultFooter = "The information contained in this report has been automatically generated based on data collected from Computers on your network and manually entered. Although Layton Technology, Inc. have taken all possible steps to ensure"
                                            + " the accuracy of this data we cannot guarantee that (a) all computers owned by your organization have been audited or (b) the accuracy of any information manually entered. As such, this report should be treated as a guide to"
                                            + " assist in ensuring software licensing compliancy. Layton Technology, Inc. cannot be held liable for any ommisions or inaccuracies which may be contained within this report.";

        protected ExportSectionList _listReportSections = new ExportSectionList();

        private ReportsDAO.ReportType _reportType;

        private UltraGrid ultraGridSummary;
		
        private DockableControlPane paneUltraGrid;
        private DockAreaPane dockAreaBottom;
        private ReportsTabViewPresenter presenter;
        private LaytonWorkItem workItem;
        private string _selectedReport;
        private List<string> _lastComplianceFilterConditions;
        private List<string> _lastCustomFilterConditions;
        private string _lastCompliantIds;
        DataTable _lastCompliantReportDataTable = new DataTable();

        protected static readonly log4net.ILog logger = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        #endregion data

        #region Properties

        public LaytonWorkItem WorkItem
        {
            get { return workItem; }
        }

        [CreateNew]
        public ReportsTabViewPresenter Presenter
        {
            set
            {
                presenter = value;
                presenter.View = this;
                //presenter.Initialize(); 
            }
            get
            {
                return presenter;
            }
        }

        /// <summary>
        /// Set the text to be displayed in the header of this view
        /// </summary>
        public string HeaderText
        {
            set
            {
                //headerLabel.Text = value;
                //this.reportGridView.Text = value;
            }
        }

        #endregion Properties

        #region Constructor

        [InjectionConstructor]
        public ReportsTabView([ServiceDependency] WorkItem workItem)
        {
            this.workItem = workItem as LaytonWorkItem;
            this.ultraGridSummary = CreateNewSummaryGrid();
            InitializeComponent();

            ultraDockManager.CompressUnpinnedTabs = false;
            ultraDockManager.DragWindowStyle = DragWindowStyle.LayeredWindowWithIndicators;
            ultraDockManager.WindowStyle = WindowStyle.VisualStudio2005;
            ultraDockManager.AnimationSpeed = AnimationSpeed.StandardSpeedPlus1;
            ultraDockManager.AutoHideDelay = 100;
            ultraDockManager.ShowCloseButton = false;
            ultraDockManager.ShowMenuButton = Infragistics.Win.DefaultableBoolean.False;
            ultraDockManager.DragWindowColor = Color.Orange;
            ultraDockManager.DragWindowOpacity = 0.3d;

            ultraGridSummary.Dock = DockStyle.Fill;
            ultraGridSummary.DisplayLayout.Override.HeaderAppearance.FontData.Bold = Infragistics.Win.DefaultableBoolean.True;

            paneUltraGrid = new DockableControlPane("grid", "Chart Summary View", ultraGridSummary);
            paneUltraGrid.Settings.Appearance.BackColor = Color.FromArgb(221, 236, 255);
            paneUltraGrid.Settings.Appearance.BackGradientStyle = Infragistics.Win.GradientStyle.None;

            dockAreaBottom = new DockAreaPane(DockedLocation.DockedBottom);
            dockAreaBottom.Size = new Size(120, 180);
            dockAreaBottom.Panes.Add(paneUltraGrid);

            ultraDockManager.DockAreas.AddRange(new DockAreaPane[] { dockAreaBottom });

            foreach (TabPage tabPage in tabControlReport.TabPages)
            {
                if (tabPage.Text == "Data View")
                {
                    tabControlReport.TabPages.Remove(tabPage);
                }
            }
        }

        #endregion Constructor

        /// <summary>
        /// Called by our Work Item Controller to inform us that the report has been changed
        /// </summary>
        public void ReportChanged()
        {
            // Clear the DataSource for the Grid as we have changed something which will invalidate
            // what is currently displayed
            //reportGridView.DataSource = null;

            // Recover the current active report
            ReportsWorkItemController wiController = WorkItem.Controller as ReportsWorkItemController;
            ReportDefinition report = wiController.CurrentReport;

            wiController.CurrentReport = report;

            //headerLabel.Visible = false;

            // See if we have a grid layout file for this report and load it if so
            string reportName = report.Name;
            string templateName = Path.Combine(Application.StartupPath, @"reports\" + reportName + "_layout.xml");
            //if (File.Exists(templateName))
            //    reportGridView.DisplayLayout.LoadFromXml(templateName);

            // Set the title for the report tab view to be the report name
            //HeaderText = reportName;
        }

        /// <summary>
        /// Called as the report is saved - we need to save the grid layout also
        /// </summary>
        public void ReportSaved()
        {
            // Recover the current active report which has just been saved
            ReportsWorkItemController wiController = WorkItem.Controller as ReportsWorkItemController;
            ReportDefinition report = wiController.CurrentReport;

            // Save the grid layout file for this report, over-writing any existing one
            string reportName = report.Name;
            string templateName = Path.Combine(Application.StartupPath, @"reports\" + reportName + "_layout.xml");
            if (File.Exists(templateName))
                File.Delete(templateName);

            //this.reportGridView.DisplayLayout.SaveAsXml(templateName);
        }

        /// <summary>
        /// This is the primary function within the tab view - it actually runs the specified report 
        /// and displays the results of that report in the report Grid
        /// </summary>
        /// <param name="report"></param>
        public void RunCustomReport(AuditedDataReportDefinition report)
        {
            _reportType = ReportsDAO.ReportType.CustomReport;
            _selectedReport = String.Empty;

            UltraGrid newGrid = CreateNewGrid(null);
            report.GenerateReport(newGrid);

            TabPage dataTabPage = new TabPage("Custom Report - Data View");
            dataTabPage.Enter += new EventHandler(dataTabPage_Enter);

            if (Control.ModifierKeys != Keys.Control)
            {
                foreach (TabPage tabPage in tabControlReport.TabPages)
                {
                    tabControlReport.TabPages.Remove(tabPage);
                }
            }

            dataTabPage.Controls.Add(newGrid);
            dataTabPage.ContextMenuStrip = resultsMenuStrip;
            tabControlReport.TabPages.Add(dataTabPage);
            tabControlReport.SelectedTab = dataTabPage;
        }

        /// <summary>
        /// This is the primary function within the tab view - it actually runs the specified report 
        /// and displays the results of that report in the report Grid
        /// </summary>
        public void RunCustomReport(bool showAssetRegister)
        {
            _reportType = ReportsDAO.ReportType.CustomReport;

            if (_lastCustomFilterConditions != null)
            {
                _lastCustomFilterConditions.Remove("ASSET_REGISTER:True");
                _lastCustomFilterConditions.Remove("ASSET_REGISTER:False");
                _lastCustomFilterConditions.Add("ASSET_REGISTER:" + Convert.ToString(showAssetRegister));

                RunCustomReport("", _lastCustomFilterConditions);
            }
        }

        /// <summary>
        /// This is the primary function within the tab view - it actually runs the specified report 
        /// and displays the results of that report in the report Grid
        /// </summary>
        /// <param name="report"></param>
        public void RunReport(ReportDefinition report)
        {
            _reportType = ReportsDAO.ReportType.SystemReport;
            _selectedReport = String.Empty;

            UltraGrid newGrid = CreateNewGrid(null);
            report.GenerateReport(newGrid);
            newGrid.InitializeLayout += new InitializeLayoutEventHandler(ultraGrid1_InitializeLayout);

            TabPage dataTabPage = new TabPage(report.Name);
            dataTabPage.Enter += new EventHandler(dataTabPage_Enter);

            if (Control.ModifierKeys != Keys.Control)
            {
                foreach (TabPage tabPage in tabControlReport.TabPages)
                {
                    tabControlReport.TabPages.Remove(tabPage);
                }
            }

            dataTabPage.Controls.Add(newGrid);
            dataTabPage.ContextMenuStrip = resultsMenuStrip;
            tabControlReport.TabPages.Add(dataTabPage);
            tabControlReport.SelectedTab = dataTabPage;
        }

        private void ultraGrid1_InitializeLayout(object sender, Infragistics.Win.UltraWinGrid.InitializeLayoutEventArgs e)
        {
            foreach (UltraGridBand band in e.Layout.Bands)
            {
                foreach (UltraGridColumn column in band.Columns)
                {
                    switch (column.Key)
                    {
                        case "object":
                            column.Hidden = true;
                            break;
                        case "applicationid":
                            column.Hidden = true;
                            break;
                        case "instanceid":
                            column.Hidden = true;
                            break;
                        case "licenseid":
                            column.Hidden = true;
                            break;
                        default:
                            column.Hidden = false;
                            break;
                    }
                }
            }

        }

        /// <summary>
        /// This is the primary function within the tab view - it actually runs the specified report 
        /// and displays the results of that report in the report Grid
        /// </summary>
        public void RunComplianceReport(string reportName, List<string> filterConditions)
        {
            if (reportName == "")
                reportName = "Compliance Report";

            _reportType = ReportsDAO.ReportType.ComplianceReport;

            // now we have the results we can produce the pie-chart showing compliance/non-compliance
            TabPage dataTabPage = new TabPage(reportName);

            dataTabPage.Enter += new EventHandler(dataTabPage_Enter);

            if (Control.ModifierKeys != Keys.Control)
            {
                foreach (TabPage tabPage in tabControlReport.TabPages)
                {
                    tabControlReport.TabPages.Remove(tabPage);
                }
            }

            _selectedReport = reportName;

            paneUltraGrid.Show();

            UltraChart complianceChart = CreateNewPieChart3D();

            Infragistics.UltraChart.Resources.Appearance.Override o = new Infragistics.UltraChart.Resources.Appearance.Override();
            o.Row = 1;
            o.Column = 0;
            o.PE.Fill = Color.FromArgb(211, 78, 78);
            complianceChart.Override.Add(o);

            Infragistics.UltraChart.Resources.Appearance.Override o1 = new Infragistics.UltraChart.Resources.Appearance.Override();
            o1.Row = 0;
            o1.Column = 0;
            o1.PE.Fill = Color.FromArgb(151, 189, 100);
            complianceChart.Override.Add(o1);

            _lastComplianceFilterConditions = filterConditions;

            ReportsWorkItemController wiController = WorkItem.Controller as ReportsWorkItemController;
            ComplianceReport cr = new ComplianceReport();

            string assetIds = cr.CreateDataTableForComplianceReport(filterConditions, wiController.ShowIncludedApplications, wiController.ShowIgnoredApplications);

            _lastCompliantIds = assetIds;
            _lastCompliantReportDataTable = new StatisticsDAO().StatisticsComplianceOverview(assetIds);

            complianceChart.DataSource = _lastCompliantReportDataTable;
            ultraGridSummary.DataSource = _lastCompliantReportDataTable;            
            dataTabPage.Controls.Add(complianceChart);
            dataTabPage.ContextMenuStrip = resultsMenuStrip;
            tabControlReport.TabPages.Add(dataTabPage);
            tabControlReport.SelectedTab = dataTabPage;
        }

        #region Custom Report Methods

        public void SaveCustomReport()
        {
            if (_lastCustomFilterConditions == null || _lastCustomFilterConditions.Count == 0)
            {
                MessageBox.Show(
                    "There is no active Custom Report in the report window." + Environment.NewLine + Environment.NewLine +
                    "Please run a report first before attempting to save.",
                    "Save Custom Report",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Information);

                return;
            }
            FormSaveCustomReportName form = new FormSaveCustomReportName();
            if (form.ShowDialog() == DialogResult.OK)
            {
                string lReportName = form.ReportName;

                if (lReportName != "")
                {
                    // saves the last run custom report
                    BinaryFormatter bf = new BinaryFormatter();
                    MemoryStream mem = new MemoryStream();
                    bf.Serialize(mem, _lastCustomFilterConditions);

                    string lReportData = Convert.ToBase64String(mem.ToArray());
                    new ReportsDAO().Insert(lReportName, ReportsDAO.ReportType.CustomReport, lReportData);

                    DesktopAlert.ShowDesktopAlert("The custom report has been saved.");
                }
            }
        }

        public void RunCustomReport(string reportName, List<string> aReportConditions)
        {
            if (reportName == "")
                reportName = "Custom Report";

            // is this a 'group results by asset' report
            bool lDisplayAsAssetRegister = false;

            foreach (string lReportCondition in aReportConditions)
            {
                if (lReportCondition.StartsWith("ASSET_REGISTER:"))
                {
                    lDisplayAsAssetRegister = Convert.ToBoolean(lReportCondition.Substring(15));
                    break;
                }
            }

            _selectedReport = reportName;
            _lastCustomFilterConditions = aReportConditions;
            UltraGrid newGrid = CreateNewGrid(null);

            ReportsWorkItemController wiController = WorkItem.Controller as ReportsWorkItemController;
            
            CustomReport cr = new CustomReport(wiController.ShowIncludedApplications, wiController.ShowIgnoredApplications);
            newGrid.DataSource = cr.CreateDataTableForCustomReport(aReportConditions);

            TabPage dataTabPage = new TabPage(reportName);
            dataTabPage.Enter += new EventHandler(dataTabPage_Enter);

            if (ModifierKeys != Keys.Control)
            {
                foreach (TabPage tabPage in tabControlReport.TabPages)
                {
                    tabControlReport.TabPages.Remove(tabPage);
                }
            }

            dataTabPage.Controls.Add(newGrid);
            dataTabPage.ContextMenuStrip = resultsMenuStrip;
            tabControlReport.TabPages.Add(dataTabPage);

            if (lDisplayAsAssetRegister)
                newGrid.DisplayLayout.Bands[0].SortedColumns.Add(newGrid.DisplayLayout.Bands[0].Columns[0], false, true);

            tabControlReport.SelectedTab = dataTabPage;            
            paneUltraGrid.Close();
        }

        #endregion

        public void SortIPAddressColumn(UltraGrid objGrid)
        {
            int iColCount = objGrid.DisplayLayout.Bands[0].Columns.Count;
            for (int i = 0; i < iColCount; i++)
            {
                string strColName = objGrid.DisplayLayout.Bands[0].Columns[i].ToString();
                string strKey = objGrid.DisplayLayout.Bands[0].Columns[i].Key.ToString();
                if (strColName == "IP Address" || strColName == "IPAddress")
                {
                    objGrid.DisplayLayout.Bands[0].Columns[i].SortComparer = new srtComparer(strKey);
                    break;
                }
            }
        }

        public void RunSQLReport(string reportName, string aSQLString)
        {
            if (reportName == "")
                reportName = "SQL Report";

            _reportType = ReportsDAO.ReportType.SqlReport;
            _selectedReport = reportName;

            if (Control.ModifierKeys != Keys.Control)
            {
                foreach (TabPage tabPage in tabControlReport.TabPages)
                {
                    tabControlReport.TabPages.Remove(tabPage);
                }
            }

            UltraGrid newGrid = CreateNewGrid(null);
            newGrid.DataSource = new StatisticsDAO().PerformQuery(aSQLString);
            

            TabPage dataTabPage = new TabPage(reportName);

            dataTabPage.Enter += new EventHandler(dataTabPage_Enter);
            dataTabPage.Controls.Add(newGrid);
            dataTabPage.ContextMenuStrip = resultsMenuStrip;

            tabControlReport.TabPages.Add(dataTabPage);
            tabControlReport.SelectedTab = dataTabPage;            
            paneUltraGrid.Close();
        }

        /// <summary>
        /// This is the primary function within the tab view - it actually runs the specified report 
        /// and displays the results of that report in the report Grid
        /// </summary>
        /// <param name="aReportName"></param>
        public void RunReport(string aReportName)
        {
            _reportType = ReportsDAO.ReportType.SystemReport;

            if (ModifierKeys != Keys.Control)
            {
                foreach (TabPage tabPage in tabControlReport.TabPages)
                {
                    tabControlReport.TabPages.Remove(tabPage);
                }
            }

            paneUltraGrid.Show();

            ReportsWorkItemController wiController = WorkItem.Controller as ReportsWorkItemController;
            wiController.SelectedReport = aReportName;

            _selectedReport = aReportName;
            //headerLabel.Text = aReportName;

            if (_selectedReport == "Internet History")
            {
                ReportDefinition internetReport = new InternetReportDefinition();
                RunReport(internetReport);
                paneUltraGrid.Close();
            }
            else if (_selectedReport == "Application Licensing")
            {
                ReportDefinition licensingReport = new LicensingReportDefinition();
                RunReport(licensingReport);
                paneUltraGrid.Close();
            }
            else if (_selectedReport == "File System")
            {
                ReportDefinition fileReport = new FileSystemReportDefinition();
                RunReport(fileReport);
                paneUltraGrid.Close();
            }
            else if (_selectedReport == "Over-Licensed Applications" || _selectedReport == "Under-Licensed Applications")
            {
                TabPage dataTabPage = new TabPage(aReportName);

                dataTabPage.Enter += new EventHandler(dataTabPage_Enter);
                dataTabPage.Controls.Add(CreateNewStackColumnChart());
                dataTabPage.ContextMenuStrip = resultsMenuStrip;
                tabControlReport.TabPages.Add(dataTabPage);
                tabControlReport.SelectedTab = dataTabPage;
            }

            else if (_selectedReport.StartsWith("Over/Under Licensed by Publisher"))
            {
                TabPage dataTabPage = new TabPage(aReportName);

                dataTabPage.Enter += new EventHandler(dataTabPage_Enter);
                dataTabPage.Controls.Add(CreateNewColumnChart());
                dataTabPage.ContextMenuStrip = resultsMenuStrip;
                tabControlReport.TabPages.Add(dataTabPage);
                tabControlReport.SelectedTab = dataTabPage;
            }

            else if (_selectedReport.StartsWith("License Keys by Publisher"))
            {
                UltraGrid newGrid = CreateNewGrid(null);
                newGrid.DataSource = new ApplicationsDAO().GetLicenseKeysByPublisher(_selectedReport.Split('|')[1], wiController.ShowIncludedApplications, wiController.ShowIgnoredApplications);

                TabPage dataTabPage = new TabPage(aReportName);

                dataTabPage.Enter += new EventHandler(dataTabPage_Enter);
                dataTabPage.Controls.Add(newGrid);
                dataTabPage.ContextMenuStrip = resultsMenuStrip;
                tabControlReport.TabPages.Add(dataTabPage);
                tabControlReport.SelectedTab = dataTabPage;

                paneUltraGrid.Close();
            }
            else if (_selectedReport.StartsWith("Audit Trail History"))
            {
                UltraGrid newGrid = CreateNewGrid(null);

                string lStartDate = "";
                string lEndDate = "";
                string[] lCompositeParts = _selectedReport.Split('|');

                if (lCompositeParts.Length == 3)
                {
                    lStartDate = lCompositeParts[1];
                    lEndDate = lCompositeParts[2];
                }

                newGrid.DataSource = new AuditTrailDAO().GetAuditTrailByDate(lStartDate, lEndDate);

                TabPage dataTabPage = new TabPage(aReportName);

                dataTabPage.Enter += new EventHandler(dataTabPage_Enter);
                dataTabPage.Controls.Add(newGrid);
                dataTabPage.ContextMenuStrip = resultsMenuStrip;

                tabControlReport.TabPages.Add(dataTabPage);
                tabControlReport.SelectedTab = dataTabPage;

                paneUltraGrid.Close();
            }
            else if (
                _selectedReport == "Installed Operating Systems" ||
                _selectedReport == "Display Adapters" ||
                _selectedReport == "USB Devices from Last Audit" ||
                _selectedReport == "Printer Associated with Assets" ||
                _selectedReport == "Applications By Asset" ||
                _selectedReport == "Internet Browsers by Asset")
            {
                AddGridReport(aReportName);
            }
            else
            {
                TabPage dataTabPage = new TabPage(aReportName);

                dataTabPage.Enter += new EventHandler(dataTabPage_Enter);
                dataTabPage.Controls.Add(CreateNewComboChartSelector());
                dataTabPage.Controls.Add(CreateNewPieChart3D());
                dataTabPage.ContextMenuStrip = resultsMenuStrip;
                tabControlReport.TabPages.Add(dataTabPage);
                tabControlReport.SelectedTab = dataTabPage;
            }
        }

        private void AddGridReport(string aReportName)
        {
            ReportsWorkItemController wiController = WorkItem.Controller as ReportsWorkItemController;
            UltraGrid newGrid = CreateNewGrid(null);

            switch (aReportName)
            {
                case "Installed Operating Systems":
                    newGrid.DataSource = new ApplicationInstanceDAO().GetInstalledOSes();
                    break;
                case "Display Adapters":
                    newGrid.DataSource = new AuditedItemsDAO().GetDisplayAdapters();
                    break;
                case "USB Devices from Last Audit":
                    newGrid.DataSource = new AuditedItemsDAO().GetUSBDevicesFromLastAudit();
                    break;
                case "Printer Associated with Assets":
                    newGrid.DataSource = new AuditedItemsDAO().GetPrintersAssociatedWithAssets();
                    break;
                case "Applications By Asset":
                    newGrid.DataSource = new AssetDAO().ApplicationsByAsset(wiController.ShowIncludedApplications, wiController.ShowIgnoredApplications);
                    break;
                case "Internet Browsers by Asset":
                    newGrid.DataSource = new AuditedItemsDAO().GetInstalledBrowsersByAsset();
                    break;
            }


            TabPage dataTabPage = new TabPage(aReportName);

            dataTabPage.Enter += new EventHandler(dataTabPage_Enter);
            dataTabPage.Controls.Add(newGrid);
            dataTabPage.ContextMenuStrip = resultsMenuStrip;
            tabControlReport.TabPages.Add(dataTabPage);
            tabControlReport.SelectedTab = dataTabPage;

            paneUltraGrid.Close();
        }



        /// <summary>
        /// Called as we refresh the current view
        /// </summary>
        public void RefreshView()
        {
            presenter.Initialize();
            base.Refresh();
        }

        #region Context Menu Handlers

        /// <summary>
        /// Called to export the contents of the displayed grid to excel
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ExportXlsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ExportToXLS();
        }


        /// <summary>
        /// Called to export the data from the grid to a PDF
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ExportPDFToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ExportToPDF();
        }

        /// <summary>
        /// Handle Export to XPS selected from the context menu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ExportXPSToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ExportToXPS();
        }

        /// <summary>
        /// Called to expand all of the rows shown in the grid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void expandAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //reportGridView.BeginUpdate();
            //foreach (UltraGridRow row in reportGridView.Rows)
            //{
            //    row.ExpandAll();
            //}
            //reportGridView.EndUpdate();
        }


        /// <summary>
        /// Called to collapse all rows in the grid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void contractAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //reportGridView.BeginUpdate();
            //foreach (UltraGridRow row in reportGridView.Rows)
            //{
            //    row.CollapseAll();
            //}
            //reportGridView.EndUpdate();
        }


        /// <summary>
        /// Called to display a 'Print preview' for this grid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void printPreviewToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //reportGridView.PrintPreview();
        }

        private void resultsGridView_InitializeRow(object sender, InitializeRowEventArgs e)
        {
            ReportsWorkItemController wiController = WorkItem.Controller as ReportsWorkItemController;
            ReportDefinition report = wiController.CurrentReport;
            if (report != null)
                report.InitializeGridRow(e.Row);
        }

        private void printToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PrintGrid();
        }

        public void PrintGrid()
        {
            TabPage tabPage = tabControlReport.SelectedTab;

            if (tabPage == null)
                return;

            UltraChart currentChart = null;
            UltraGrid currentGrid = null;

            foreach (Control control in tabPage.Controls)
            {
                if (control.GetType() == typeof(UltraChart))
                {
                    currentChart = (UltraChart)control;
                    break;
                }
                else if (control.GetType() == typeof(UltraGrid))
                {
                    currentGrid = (UltraGrid)control;
                    break;
                }
            }

            if (currentChart != null)
            {
                currentChart.PrintChart();
            }
            else if (currentGrid != null)
            {
                currentGrid.InitializePrint += new InitializePrintEventHandler(currentGrid_InitializePrint);
                currentGrid.Print();
            }
        }

        void currentGrid_InitializePrint(object sender, CancelablePrintEventArgs e)
        {
            e.PrintDocument.DefaultPageSettings.Landscape = true;
            e.PrintDocument.DocumentName = "AuditWizard Report - " + _selectedReport;

            e.DefaultLogicalPageLayoutInfo.FitWidthToPages = 1;

            // Set up the header and the footer.
            e.DefaultLogicalPageLayoutInfo.PageHeader = _selectedReport;
            e.DefaultLogicalPageLayoutInfo.PageHeaderHeight = 30;
            e.DefaultLogicalPageLayoutInfo.PageHeaderAppearance.FontData.Name = "Verdana";
            e.DefaultLogicalPageLayoutInfo.PageHeaderAppearance.FontData.SizeInPoints = 12;
            e.DefaultLogicalPageLayoutInfo.PageHeaderAppearance.TextHAlign = Infragistics.Win.HAlign.Center;
            e.DefaultLogicalPageLayoutInfo.PageHeaderBorderStyle = Infragistics.Win.UIElementBorderStyle.None;

            // Use <#> token in the string to designate page numbers.
            e.DefaultLogicalPageLayoutInfo.PageFooter = "Page <#>.";
            e.DefaultLogicalPageLayoutInfo.PageFooterHeight = 30;
            e.DefaultLogicalPageLayoutInfo.PageFooterAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            e.DefaultLogicalPageLayoutInfo.PageFooterAppearance.FontData.Name = "Verdana";
            e.DefaultLogicalPageLayoutInfo.PageFooterAppearance.FontData.SizeInPoints = 10;
            e.DefaultLogicalPageLayoutInfo.PageFooterAppearance.FontData.Italic = Infragistics.Win.DefaultableBoolean.False;
            e.DefaultLogicalPageLayoutInfo.PageFooterBorderStyle = Infragistics.Win.UIElementBorderStyle.None;
        }

        void currentGrid_InitializePrintPreview(object sender, CancelablePrintPreviewEventArgs e)
        {
            e.PrintDocument.DefaultPageSettings.Landscape = true;
            e.PrintDocument.DocumentName = "AuditWizard Report - " + _selectedReport;

            e.DefaultLogicalPageLayoutInfo.FitWidthToPages = 1;

            // Set up the header and the footer.
            e.DefaultLogicalPageLayoutInfo.PageHeader = _selectedReport;
            e.DefaultLogicalPageLayoutInfo.PageHeaderHeight = 30;
            e.DefaultLogicalPageLayoutInfo.PageHeaderAppearance.FontData.Name = "Verdana";
            e.DefaultLogicalPageLayoutInfo.PageHeaderAppearance.FontData.SizeInPoints = 12;
            e.DefaultLogicalPageLayoutInfo.PageHeaderAppearance.TextHAlign = Infragistics.Win.HAlign.Center;
            e.DefaultLogicalPageLayoutInfo.PageHeaderBorderStyle = Infragistics.Win.UIElementBorderStyle.None;

            // Use <#> token in the string to designate page numbers.
            e.DefaultLogicalPageLayoutInfo.PageFooter = "Page <#>.";
            e.DefaultLogicalPageLayoutInfo.PageFooterHeight = 30;
            e.DefaultLogicalPageLayoutInfo.PageFooterAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            e.DefaultLogicalPageLayoutInfo.PageFooterAppearance.FontData.Name = "Verdana";
            e.DefaultLogicalPageLayoutInfo.PageFooterAppearance.FontData.SizeInPoints = 10;
            e.DefaultLogicalPageLayoutInfo.PageFooterAppearance.FontData.Italic = Infragistics.Win.DefaultableBoolean.False;
            e.DefaultLogicalPageLayoutInfo.PageFooterBorderStyle = Infragistics.Win.UIElementBorderStyle.None;
        }

        public void PrintPreviewGrid()
        {
            TabPage tabPage = tabControlReport.SelectedTab;

            if (tabPage == null)
                return;

            UltraChart currentChart = null;
            UltraGrid currentGrid = null;

            foreach (Control control in tabPage.Controls)
            {
                if (control.GetType() == typeof(UltraChart))
                {
                    currentChart = (UltraChart)control;
                    break;
                }
                else if (control.GetType() == typeof(UltraGrid))
                {
                    currentGrid = (UltraGrid)control;
                    break;
                }
            }

            if (currentChart != null)
            {
                printPreviewDialog.Document = currentChart.PrintDocument;
                printPreviewDialog.ShowDialog();
            }
            else if (currentGrid != null)
            {
                UltraGridLayout layout = new UltraGridLayout();
                currentGrid.InitializePrintPreview += new InitializePrintPreviewEventHandler(currentGrid_InitializePrintPreview);
                currentGrid.PrintPreview();
            }
        }

        /// <summary>
        /// Called when we want to initialize the grid - this depends on the type of the report being executed
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void reportGridView_InitializeLayout(object sender, InitializeLayoutEventArgs e)
        {
            // Exclude the object column from the column chooser
            //e.Layout.Bands[0].Columns["object"].ExcludeFromColumnChooser = ExcludeFromColumnChooser.True;
        }

        #endregion Context Menu Handlers

        #region Export Functions

        /// <summary>
        /// Export the graph data to an XLS format file
        /// </summary>
        public void ExportToXLS()
        {
            TabPage tabPage = tabControlReport.SelectedTab;
            UltraGrid currentGrid = null;

            if (tabPage == null)
            {
                MessageBox.Show(
                    "There is currently no table data available to export.",
                    "AuditWizard",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Information);

                return;
            }

            foreach (Control control in tabPage.Controls)
            {
                if (control.GetType() == typeof(UltraGrid))
                {
                    currentGrid = (UltraGrid)control;
                    break;
                }
            }

            if (currentGrid != null)
            {
                UltraGridExporter.ExportUltraGridToExcel(currentGrid, ProcessSelectedReportName(_selectedReport));
            }
            else
            {
                MessageBox.Show(
                    "There is currently no table data available to export.",
                    "AuditWizard",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Information);
            }
        }

        /// <summary>
        /// Export to XPS
        /// </summary>
        public void ExportToXPS()
        {
            TabPage tabPage = tabControlReport.SelectedTab;
            UltraGrid currentGrid = null;

            if (tabPage == null)
            {
                MessageBox.Show(
                    "There is currently no table data available to export.",
                    "AuditWizard",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Information);

                return;
            }

            foreach (Control control in tabPage.Controls)
            {
                if (control.GetType() == typeof(UltraGrid))
                {
                    currentGrid = (UltraGrid)control;
                    break;
                }
            }

            if (currentGrid != null)
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog();
                saveFileDialog.ValidateNames = true;
                saveFileDialog.FileName = ProcessSelectedReportName(_selectedReport) + ".xps";
                saveFileDialog.Filter = "XML Paper Specification (*.xps)|*.xps";

                if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
                {
                    UltraGridExporter.Export(saveFileDialog.FileName
                                            , _selectedReport
                                            , "Generated by AuditWizard from Layton Technology, Inc."
                                            , DataStrings.Disclaimer
                                            , currentGrid
                                            , Infragistics.Documents.Reports.Report.FileFormat.XPS);
                    DesktopAlert.ShowDesktopAlert("Data successfully exported to '" + saveFileDialog.FileName + "'");
                }
            }
            else
            {
                MessageBox.Show(
                    "There is currently no table data available to export.",
                    "AuditWizard",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Information);
            }
        }
        /// <summary>
        /// This function is added to remove the special characters in the file name
        /// </summary>
        /// <param name="strReportName"></param>
        /// <returns></returns>
        public string ProcessSelectedReportName(string strReportName)
        {            
            return Regex.Replace(strReportName, "[^a-zA-Z0-9_.-]+", "", RegexOptions.Compiled);            
        }

        /// <summary>
        /// Export to PDF
        /// </summary>
        public void ExportToPDF()
        {
            TabPage tabPage = tabControlReport.SelectedTab;
            UltraChart currentChart = null;
            UltraGrid currentGrid = null;

            ExportSection headerSection = new ExportSection(ExportSection.eSectionType.header, new FormattedText());
            headerSection.FormattedText.ForeColor = Color.DarkBlue;
            headerSection.FormattedText.FontData.Bold = Infragistics.Win.DefaultableBoolean.True;
            headerSection.FormattedText.FontData.Name = "Verdana";
            headerSection.FormattedText.FontData.SizeInPoints = 10;
            headerSection.FormattedText.HorizontalAlignment = Infragistics.Win.HAlign.Center;

            ExportSection subheadingSection = new ExportSection(ExportSection.eSectionType.subheader, new FormattedText(defaultSubHeading));
            subheadingSection.FormattedText.FontData.Underline = Infragistics.Win.DefaultableBoolean.True;
            subheadingSection.FormattedText.FontData.Name = "Verdana";
            subheadingSection.FormattedText.FontData.SizeInPoints = 8;

            // Default footer
            ExportSection footerSection = new ExportSection(ExportSection.eSectionType.footer, new FormattedText(defaultFooter));
            footerSection.FormattedText.FontData.Name = "Verdana";
            footerSection.FormattedText.FontData.SizeInPoints = 6;

            // Add these sections
            _listReportSections.Clear();
            _listReportSections.AddRange(new ExportSection[] { headerSection, subheadingSection, footerSection });

            foreach (Control control in tabPage.Controls)
            {
                if (control.GetType() == typeof(UltraChart))
                {
                    currentChart = (UltraChart)control;
                    break;
                }
                if (control.GetType() == typeof(UltraGrid))
                {
                    currentGrid = (UltraGrid)control;
                    break;
                }
            }

            if (currentChart != null)
            {
                ExportSection exportHeaderSection = _listReportSections.GetSection(ExportSection.eSectionType.header);
                currentChart.Legend.Location = Infragistics.UltraChart.Shared.Styles.LegendLocation.Bottom;

                // Create the report itself
                Report report = new Report();
                Infragistics.Documents.Reports.Report.Section.ISection section;

                report.Info.Title = "This is the title";
                report.Info.Author = "Author";
                report.Info.Creator = "Creator";
                report.Info.Copyright = "Copyright";

                report.Preferences.Printing.FitToMargins = true;
                report.Preferences.Printing.PaperOrientation = Infragistics.Documents.Reports.Report.Preferences.Printing.PaperOrientation.Landscape;
                report.Preferences.Printing.PaperSize = Infragistics.Documents.Reports.Report.Preferences.Printing.PaperSize.A4;

                section = report.AddSection();
                section.PageSize = PageSizes.A4;
                section.PageMargins.All = 10;
                section.PageOrientation = PageOrientation.Landscape;

                section.PageNumbering = new Infragistics.Documents.Reports.Report.Section.PageNumbering();
                section.PageNumbering.Style = new Infragistics.Documents.Reports.Report.Text.Style(Infragistics.Documents.Reports.Graphics.Fonts.Arial, Infragistics.Documents.Reports.Graphics.Brushes.Black);
                section.PageNumbering.Template = "Page [Page #] of [TotalPages]";
                section.PageNumbering.Continue = true;
                section.PageNumbering.SkipFirst = false;
                section.PageNumbering.Alignment = PageNumberAlignment.Right;
                section.PageNumbering.OffsetX = -10;

                Infragistics.Documents.Reports.Report.Text.IText text = section.AddText();
                Infragistics.Documents.Reports.Report.Section.ISectionHeader header = section.AddHeader();
                header.Height = 50;
                header.Repeat = true;

                Infragistics.Documents.Reports.Report.Text.Style blueLargeStyle =
                    new Infragistics.Documents.Reports.Report.Text.Style(new Infragistics.Documents.Reports.Graphics.Font("Arial", 20), Infragistics.Documents.Reports.Graphics.Brushes.DarkBlue);

                text = header.AddText(10, 20);
                text.Width = new FixedWidth(100);
                text.Style = blueLargeStyle;
                text.AddContent(exportHeaderSection.FormattedText.RawText);

                ICanvas canvas = section.AddCanvas();
                Graphics g = canvas.CreateGraphics();

                currentChart.RenderPdfFriendlyGraphics(g, 820, 500);

                // First browse for the folder / file that we will save
                SaveFileDialog saveFileDialog = new SaveFileDialog();
                saveFileDialog.ValidateNames = true;
                saveFileDialog.FileName = ProcessSelectedReportName(_selectedReport) + ".pdf";
                saveFileDialog.Filter = "Adobe Acrobat Document (*.pdf)|*.pdf";

                if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
                {
                    report.Publish(saveFileDialog.FileName, FileFormat.PDF);
                    DesktopAlert.ShowDesktopAlert("Data successfully exported to '" + saveFileDialog.FileName + "'");
                }
            }
            else if (currentGrid != null)
            {
                // First browse for the folder / file that we will save
                SaveFileDialog saveFileDialog = new SaveFileDialog();
                saveFileDialog.ValidateNames = true;
                saveFileDialog.FileName = ProcessSelectedReportName(_selectedReport) + ".pdf";
                saveFileDialog.Filter = "Adobe Acrobat Document (*.pdf)|*.pdf";

                currentGrid.DisplayLayout.AutoFitStyle = AutoFitStyle.ResizeAllColumns;

                if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
                {
                    UltraGridExporter.Export(saveFileDialog.FileName
                                        , _selectedReport
                                        , String.Empty
                                        , String.Empty
                                        , currentGrid
                                        , FileFormat.PDF);

                    DesktopAlert.ShowDesktopAlert("Data successfully exported to '" + saveFileDialog.FileName + "'");
                }
            }
        }

        /// <summary>
        /// Called to format an exportable section of the report
        /// </summary>
        /// <param name="sectionText"></param>
        /// <param name="formatSection"></param>
        protected static void FormatExportSection(Infragistics.Documents.Reports.Report.Text.IText sectionText, ExportSection formatSection)
        {
            // Format the section
            // Horizontal Alignment
            if (formatSection.FormattedText.HorizontalAlignment == Infragistics.Win.HAlign.Center)
                sectionText.Alignment.Horizontal = Alignment.Center;
            else if (formatSection.FormattedText.HorizontalAlignment == Infragistics.Win.HAlign.Left)
                sectionText.Alignment.Horizontal = Alignment.Left;
            else
                sectionText.Alignment.Horizontal = Alignment.Right;

            // Vertical Alignment
            if (formatSection.FormattedText.VerticalAlignment == Infragistics.Win.VAlign.Top)
                sectionText.Alignment.Vertical = Alignment.Top;
            else if (formatSection.FormattedText.VerticalAlignment == Infragistics.Win.VAlign.Bottom)
                sectionText.Alignment.Horizontal = Alignment.Bottom;
            else
                sectionText.Alignment.Horizontal = Alignment.Middle;

            // Create a style based on the settings
            sectionText.Style = CreateStyle(formatSection);

            // Set the text
            sectionText.AddContent(formatSection.FormattedText.GetFormattedText);
        }

        /// <summary>
        /// Create an Infragistics style based on the criteria specified within the ExportSection object
        /// </summary>
        /// <param name="section"></param>
        /// <returns></returns>
        protected static Infragistics.Documents.Reports.Report.Text.Style CreateStyle(ExportSection section)
        {
            // Create the font which we shall use for the header
            Infragistics.Documents.Reports.Graphics.Font headerFont = new Infragistics.Documents.Reports.Graphics.Font(section.FormattedText.FontData.Name, section.FormattedText.FontData.SizeInPoints);
            headerFont.Underline = (section.FormattedText.FontData.Underline == Infragistics.Win.DefaultableBoolean.True) ? true : false;
            headerFont.Bold = (section.FormattedText.FontData.Bold == Infragistics.Win.DefaultableBoolean.True) ? true : false;

            // Create a style based on this
            Infragistics.Documents.Reports.Graphics.Color infColor = new Infragistics.Documents.Reports.Graphics.Color(section.FormattedText.ForeColor);
            Infragistics.Documents.Reports.Graphics.SolidColorBrush Brush = new Infragistics.Documents.Reports.Graphics.SolidColorBrush(infColor);
            Infragistics.Documents.Reports.Report.Text.Style newStyle = new Infragistics.Documents.Reports.Report.Text.Style(headerFont, Brush);

            //Infragistics.Documents.Reports.Report.Text.Style newStyle = new Infragistics.Documents.Reports.Report.Text.Style(headerFont, Infragistics.Documents.Reports.Graphics.Brushes.DeepPink);


            // ..and return it
            return newStyle;
        }

        #endregion Export Functions

        private DataTable GetChartData()
        {
            DataTable reportData = new DataTable();
            StatisticsDAO lStatisticsDAO = new StatisticsDAO();

            ReportsWorkItemController wiController = WorkItem.Controller as ReportsWorkItemController;
            bool showIncluded = wiController.ShowIncludedApplications;
            bool showIgnored = wiController.ShowIgnoredApplications;

            if (_selectedReport.StartsWith("Application Compliance by Publisher"))
            {
                reportData = lStatisticsDAO.StatisticsComplianceByType(_selectedReport.Split('|')[1]);
            }
            else if (_selectedReport.StartsWith("Over/Under Licensed by Publisher"))
            {
                reportData = lStatisticsDAO.StatisticsSoftwareComplianceByPublisher(_selectedReport.Split('|')[1]);
            }
            else
            {
                // based on the selected report, return the relevant DataTable
                switch (_selectedReport)
                {
                    case "Asset status":
                        reportData = lStatisticsDAO.StatisticsAssetStates();
                        break;

                    case "Asset by location":
                        reportData = lStatisticsDAO.StatisticsAssetLocations();
                        break;

                    case "Audit age":
                        reportData = lStatisticsDAO.AuditHistoryStatistics();
                        break;

                    case "Audit deployment status":
                        reportData = lStatisticsDAO.StatisticsAssetAgentVersions();
                        break;

                    case "Discovery agent versions":
                        reportData = lStatisticsDAO.StatisticsAssetAgentVersions();
                        break;

                    case "Audited/Unaudited assets":
                        reportData = lStatisticsDAO.StatisticsAuditedAssets();
                        break;

                    case "Operating systems":
                        reportData = lStatisticsDAO.StatisticsTopOS();
                        break;

                    case "Agent deployment status":
                        reportData = lStatisticsDAO.StatisticsAgentStates();
                        break;

                    case "Top 15 Software Vendors":
                        reportData = lStatisticsDAO.StatisticsTopPublishers(showIncluded, showIgnored);
                        break;

                    case "Over-Licensed Applications":
                        reportData = lStatisticsDAO.StatisticsOverLicensedApplications();
                        break;

                    case "Under-Licensed Applications":
                        reportData = lStatisticsDAO.StatisticsUnderLicensedApplications();
                        break;

                    case "Top 15 Manufacturers":
                        reportData = lStatisticsDAO.StatisticsTopManufacturers();
                        break;

                    case "Microsoft Office Versions":
                        reportData = lStatisticsDAO.StatisticsMsOffice(1000, showIncluded, showIgnored);
                        break;

                    case "Top 10 System Processors":
                        reportData = lStatisticsDAO.StatisticsTopAuditedItem(10, "Hardware|CPU", "name");
                        break;

                    case "System RAM Capacity":
                        reportData = lStatisticsDAO.StatisticsTopMemoryCapacity();
                        break;

                    case "Processor Speeds":
                        reportData = lStatisticsDAO.StatisticsTopProcessorSpeeds();
                        break;

                    case "Audited / Unaudited":
                        reportData = lStatisticsDAO.StatisticsAssetsAudited();
                        break;

                    case "Assets By Type":
                        reportData = lStatisticsDAO.StatisticsAssetsByType();
                        break;

                    case "Support Expiry Date":
                        reportData = lStatisticsDAO.StatisticsSupportExpiryDate();
                        break;

                    case "Overall Application Compliance":
                        reportData = lStatisticsDAO.StatisticsComplianceByType(String.Empty);
                        break;

                    case "Default Internet Browsers":
                        reportData = lStatisticsDAO.StatisticsDefaultBrowser();
                        break;
                }
            }

            ultraGridSummary.DataSource = reportData;
            return reportData;
        }

        private DataTable ReportDataDrilldown(string aRowLabel)
        {
            DataTable reportDataSet = new DataTable();
            StatisticsDAO lStatisticsDAO = new StatisticsDAO();
            AssetDAO lAssetDAO = new AssetDAO();

            if (_selectedReport.StartsWith("Application Compliance by Publisher"))
            {
                reportDataSet = lStatisticsDAO.StatisticsComplianceByApplicationDrilldown(_selectedReport.Split('|')[1] + "|" + aRowLabel);
            }
            else if (_selectedReport.StartsWith("Over/Under Licensed by Publisher"))
            {
                reportDataSet = lStatisticsDAO.StatisticsSoftwareComplianceByPublisherDrilldown(aRowLabel);
            }
            //else if (aRowLabel == "Compliant" || aRowLabel == "Non-Compliant")
            else if (_reportType == ReportsDAO.ReportType.ComplianceReport)
            {
                ComplianceReport cr = new ComplianceReport();
                reportDataSet = cr.CreateComplianceGrid(aRowLabel, _lastCompliantIds, _lastComplianceFilterConditions);
            }
            else
            {
                string lVersion;
                string lApplicationName;
                switch (_selectedReport)
                {
                    case "Asset status":
                        reportDataSet = lStatisticsDAO.StatisticsAssetsStatusDrilldown(aRowLabel);
                        break;

                    case "Asset by location":
                        reportDataSet = lStatisticsDAO.StatisticsAssetLocationDrilldown(aRowLabel);
                        break;

                    case "Agent deployment status":
                        reportDataSet = lStatisticsDAO.StatisticsAgentDeploymentDrilldown(aRowLabel);
                        break;

                    case "Discovery agent versions":
                        reportDataSet = lStatisticsDAO.StatisticsAgentVersionsDrilldown(aRowLabel);
                        break;

                    case "Operating systems":
                        reportDataSet = lStatisticsDAO.StatisticsAssetOSDrilldown(aRowLabel);
                        break;

                    case "Top 15 Software Vendors":
                        reportDataSet = lStatisticsDAO.StatisticsTopPublisherDrilldown(aRowLabel);
                        break;

                    case "Top 15 Manufacturers":
                        reportDataSet = lStatisticsDAO.StatisticsTopManufacturersDrilldown(aRowLabel);
                        break;

                    case "Microsoft Office Versions":
                        reportDataSet = lStatisticsDAO.StatisticsOfficeVersionDrilldown(aRowLabel);
                        break;

                    case "Top 10 System Processors":
                        reportDataSet = lStatisticsDAO.StatisticsSystemProcessorsDrilldown(aRowLabel);
                        break;

                    case "System RAM Capacity":
                        reportDataSet = lStatisticsDAO.StatisticsRAMCapacityDrilldown(aRowLabel);
                        break;

                    case "Processor Speeds":
                        reportDataSet = lStatisticsDAO.StatisticsProcessorSpeedsDrilldown(aRowLabel);
                        break;

                    case "Audited / Unaudited":
                        reportDataSet = lStatisticsDAO.StatisticsAssetAuditedDrilldown(aRowLabel); ;
                        break;

                    case "Assets By Type":
                        reportDataSet = lStatisticsDAO.StatisticsAssetTypesDrilldown(aRowLabel);
                        break;

                    case "Support Expiry Date":
                        reportDataSet = lStatisticsDAO.StatisticsSupportExpiryDateDrilldown(aRowLabel);
                        break;

                    case "Overall Application Compliance":
                        reportDataSet = lStatisticsDAO.StatisticsComplianceDrilldown(aRowLabel);
                        break;

                    case "Audited/Unaudited assets":
                        reportDataSet = lStatisticsDAO.StatisticsAuditedAssetsDrilldown(aRowLabel);
                        break;

                    case "Over-Licensed Applications":
                        lVersion = (aRowLabel.EndsWith(")")) ? aRowLabel.Substring(aRowLabel.LastIndexOf('(') + 2).TrimEnd(')') : "";
                        lApplicationName = (lVersion == "") ? aRowLabel : aRowLabel.Substring(0, aRowLabel.LastIndexOf(" ("));
                        reportDataSet = lAssetDAO.FindAssetByApplicationNameAndVersion(lApplicationName, lVersion, lAssetDAO.GetAllAssetIdsAsString());
                        break;

                    case "Under-Licensed Applications":
                        lVersion = (aRowLabel.EndsWith(")")) ? aRowLabel.Substring(aRowLabel.LastIndexOf('(') + 2).TrimEnd(')') : "";
                        lApplicationName = (lVersion == "") ? aRowLabel : aRowLabel.Substring(0, aRowLabel.LastIndexOf(" ("));
                        reportDataSet = lAssetDAO.FindAssetByApplicationNameAndVersion(lApplicationName, lVersion, lAssetDAO.GetAllAssetIdsAsString());
                        break;

                    case "Default Internet Browsers":
                        reportDataSet = lStatisticsDAO.StatisticsDefaultBrowserDrilldown(aRowLabel);
                        break;
                }
            }

            return reportDataSet;
        }

        #region Create Components

        private UltraGrid CreateNewSummaryGrid()
        {
            UltraGrid lResultsGrid = new UltraGrid();

            try
            {
                Infragistics.Win.Appearance lGridAppearance = new Infragistics.Win.Appearance();
                Infragistics.Win.Appearance lRowAppearance = new Infragistics.Win.Appearance();
                Infragistics.Win.Appearance lHeaderAppearance = new Infragistics.Win.Appearance();
                Infragistics.Win.Appearance lRowAlternateAppearance = new Infragistics.Win.Appearance();
                Infragistics.Win.Appearance lSelectedRowAppearance = new Infragistics.Win.Appearance();

                ((System.ComponentModel.ISupportInitialize)(lResultsGrid)).BeginInit();
                lResultsGrid.SuspendLayout();

                lGridAppearance.BackColor = System.Drawing.Color.White;
                lResultsGrid.DisplayLayout.Appearance = lGridAppearance;

                lSelectedRowAppearance.BackColor = System.Drawing.Color.FromArgb(238, 243, 223);
                lSelectedRowAppearance.ForeColor = System.Drawing.Color.Black;
                lResultsGrid.DisplayLayout.Override.SelectedRowAppearance = lSelectedRowAppearance;

                lRowAppearance.BackColor = System.Drawing.Color.White;

                lResultsGrid.DisplayLayout.AutoFitStyle = AutoFitStyle.ResizeAllColumns;
                lResultsGrid.Dock = DockStyle.Fill;

                lRowAppearance.BorderColor = System.Drawing.Color.LightGray;
                lRowAlternateAppearance.BackColor = System.Drawing.Color.FromArgb(246, 252, 255);
                lResultsGrid.DisplayLayout.Override.RowAppearance = lRowAppearance;
                lResultsGrid.DisplayLayout.Override.RowSelectors = Infragistics.Win.DefaultableBoolean.True;
                lResultsGrid.DisplayLayout.RowConnectorStyle = Infragistics.Win.UltraWinGrid.RowConnectorStyle.None;
                lResultsGrid.DisplayLayout.Override.AllowUpdate = Infragistics.Win.DefaultableBoolean.False;
                lResultsGrid.DisplayLayout.Override.HeaderClickAction = HeaderClickAction.SortMulti;

                lResultsGrid.DisplayLayout.Override.BorderStyleCell = Infragistics.Win.UIElementBorderStyle.None;
                lResultsGrid.DisplayLayout.Override.CellPadding = 3;
                lResultsGrid.DisplayLayout.Override.RowAlternateAppearance = lRowAlternateAppearance;
                lResultsGrid.DisplayLayout.Override.BorderStyleHeader = Infragistics.Win.UIElementBorderStyle.None;

                lResultsGrid.DisplayLayout.Override.AllowRowFiltering = Infragistics.Win.DefaultableBoolean.False;
                lResultsGrid.DisplayLayout.Override.AllowRowSummaries = AllowRowSummaries.SingleSummaryBasedOnDataType;
                lResultsGrid.DisplayLayout.Override.SelectTypeRow = SelectType.Single;

                lResultsGrid.DisplayLayout.Override.AllowColMoving = AllowColMoving.NotAllowed;
                lResultsGrid.DisplayLayout.Override.AllowColSwapping = AllowColSwapping.NotAllowed;
                lResultsGrid.DisplayLayout.ScrollBounds = ScrollBounds.ScrollToFill;
                lResultsGrid.DisplayLayout.Override.SelectTypeCol = SelectType.None;

                lResultsGrid.DoubleClickRow += new DoubleClickRowEventHandler(lResultsGrid_DoubleClickRow);

                lResultsGrid.UseOsThemes = Infragistics.Win.DefaultableBoolean.False;
                lResultsGrid.DisplayLayout.Override.HeaderAppearance.BackColor = Color.White;
                lResultsGrid.DisplayLayout.Override.HeaderAppearance.BackColor = Color.FromArgb(221, 236, 255);
                lResultsGrid.DisplayLayout.Override.HeaderAppearance.ForeColor = Color.DimGray;
                lResultsGrid.DisplayLayout.Override.HeaderAppearance.FontData.Bold = Infragistics.Win.DefaultableBoolean.True;
                lResultsGrid.DisplayLayout.Override.RowSelectorAppearance.BackColor = Color.White;
                lResultsGrid.DisplayLayout.Override.BorderStyleHeader = Infragistics.Win.UIElementBorderStyle.None;
                lResultsGrid.DisplayLayout.Override.CellClickAction = CellClickAction.RowSelect;

                lResultsGrid.DisplayLayout.ScrollBarLook.ViewStyle = Infragistics.Win.UltraWinScrollBar.ScrollBarViewStyle.Outlook2007;
                lResultsGrid.DisplayLayout.Override.BorderStyleCell = Infragistics.Win.UIElementBorderStyle.None;
                lResultsGrid.DisplayLayout.Override.BorderStyleHeader = Infragistics.Win.UIElementBorderStyle.None;
                lResultsGrid.DisplayLayout.Override.BorderStyleRow = Infragistics.Win.UIElementBorderStyle.None;

                lResultsGrid.DisplayLayout.Override.CellAppearance.BorderColor = System.Drawing.Color.Transparent;

                ((System.ComponentModel.ISupportInitialize)(lResultsGrid)).EndInit();
                lResultsGrid.ResumeLayout();
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
            }

            return lResultsGrid;
        }

        private UltraGrid CreateNewGrid(string aRowLabel)
        {
            UltraGrid lResultsGrid = new UltraGrid();

            try
            {
                Infragistics.Win.Appearance lGridAppearance = new Infragistics.Win.Appearance();
                Infragistics.Win.Appearance lRowAppearance = new Infragistics.Win.Appearance();
                Infragistics.Win.Appearance lRowAlternateAppearance = new Infragistics.Win.Appearance();
                Infragistics.Win.Appearance lSelectedRowAppearance = new Infragistics.Win.Appearance();

                lGridAppearance.BackColor = System.Drawing.Color.White;
                lResultsGrid.DisplayLayout.Appearance = lGridAppearance;

                lSelectedRowAppearance.BackColor = System.Drawing.Color.FromArgb(238, 243, 223);
                lSelectedRowAppearance.ForeColor = System.Drawing.Color.Black;
                lResultsGrid.DisplayLayout.Override.SelectedRowAppearance = lSelectedRowAppearance;

                lResultsGrid.DisplayLayout.Override.FilterCellAppearance.BackColor = System.Drawing.Color.FromArgb(246, 252, 255);

                lRowAppearance.BackColor = System.Drawing.Color.White;

                lResultsGrid.DisplayLayout.AutoFitStyle = AutoFitStyle.ResizeAllColumns;
                lResultsGrid.Dock = DockStyle.Fill;

                lRowAppearance.BorderColor = System.Drawing.Color.LightGray;
                lRowAppearance.TextVAlignAsString = "Middle";
                lRowAlternateAppearance.BackColor = System.Drawing.Color.FromArgb(246, 252, 255);
                lResultsGrid.DisplayLayout.Override.RowAppearance = lRowAppearance;
                lResultsGrid.DisplayLayout.Override.RowSelectors = Infragistics.Win.DefaultableBoolean.True;
                lResultsGrid.DisplayLayout.RowConnectorStyle = Infragistics.Win.UltraWinGrid.RowConnectorStyle.None;
                lResultsGrid.DisplayLayout.Override.AllowUpdate = Infragistics.Win.DefaultableBoolean.False;

                lResultsGrid.DisplayLayout.Override.BorderStyleCell = Infragistics.Win.UIElementBorderStyle.None;
                lResultsGrid.DisplayLayout.Override.CellPadding = 4;
                lResultsGrid.DisplayLayout.Override.RowAlternateAppearance = lRowAlternateAppearance;

                lResultsGrid.DisplayLayout.Override.AllowRowFiltering = Infragistics.Win.DefaultableBoolean.True;
                lResultsGrid.DisplayLayout.Override.AllowRowSummaries = AllowRowSummaries.BasedOnDataType;
                lResultsGrid.DisplayLayout.Override.FilterUIType = FilterUIType.FilterRow;
                lResultsGrid.DisplayLayout.Override.SelectTypeRow = SelectType.Single;

                lResultsGrid.DisplayLayout.Override.AllowColMoving = AllowColMoving.WithinGroup;
                lResultsGrid.DisplayLayout.Override.AllowColSwapping = AllowColSwapping.WithinGroup;

                lResultsGrid.UseOsThemes = Infragistics.Win.DefaultableBoolean.False;
                //lResultsGrid.DisplayLayout.Override.HeaderAppearance.BackColor = Color.White;
                lResultsGrid.DisplayLayout.Override.HeaderAppearance.BackColor = Color.FromArgb(221, 236, 255);
                lResultsGrid.DisplayLayout.Override.HeaderAppearance.ForeColor = Color.DimGray;
                lResultsGrid.DisplayLayout.Override.HeaderAppearance.FontData.Bold = Infragistics.Win.DefaultableBoolean.True;
                lResultsGrid.DisplayLayout.Override.RowSelectorAppearance.BackColor = Color.White;
                lResultsGrid.DisplayLayout.Override.BorderStyleHeader = Infragistics.Win.UIElementBorderStyle.None;

                // Set the view style to OutlookGroupBy. Without it, group by box won't show up
                lResultsGrid.DisplayLayout.ViewStyleBand = ViewStyleBand.OutlookGroupBy;

                Infragistics.Win.Appearance appearance14 = new Infragistics.Win.Appearance();
                appearance14.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(216)))), ((int)(((byte)(228)))), ((int)(((byte)(248)))));
                appearance14.BackColor2 = System.Drawing.Color.FromArgb(((int)(((byte)(157)))), ((int)(((byte)(185)))), ((int)(((byte)(235)))));
                //appearance14.BackColor = Color.White;
                appearance14.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
                //appearance14.BackGradientStyle = Infragistics.Win.GradientStyle.None;
                appearance14.FontData.BoldAsString = "True";
                appearance14.FontData.Name = "Verdana";
                appearance14.FontData.SizeInPoints = 10F;
                appearance14.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(127)))), ((int)(((byte)(177)))));
                //appearance14.ForeColor = Color.DimGray;
                lResultsGrid.DisplayLayout.GroupByBox.Appearance = appearance14;
                lResultsGrid.DisplayLayout.GroupByBox.BandLabelBorderStyle = Infragistics.Win.UIElementBorderStyle.None;
                lResultsGrid.DisplayLayout.GroupByBox.ButtonBorderStyle = Infragistics.Win.UIElementBorderStyle.None;

                Infragistics.Win.Appearance appearance15 = new Infragistics.Win.Appearance();
                appearance15.BackColor = System.Drawing.Color.Transparent;
                appearance15.FontData.Name = "Verdana";
                lResultsGrid.DisplayLayout.GroupByBox.PromptAppearance = appearance15;

                lResultsGrid.DisplayLayout.ViewStyle = ViewStyle.MultiBand;
                lResultsGrid.DisplayLayout.ScrollBounds = ScrollBounds.ScrollToFill;
                lResultsGrid.DisplayLayout.Override.SelectTypeCol = SelectType.None;
                lResultsGrid.DisplayLayout.Override.CellClickAction = CellClickAction.RowSelect;

                lResultsGrid.BeforeRowFilterChanged += new BeforeRowFilterChangedEventHandler(lResultsGrid_BeforeRowFilterChanged);
                lResultsGrid.DoubleClickRow += new DoubleClickRowEventHandler(lResultsGridAsset_DoubleClickRow);
                lResultsGrid.MouseClick += new MouseEventHandler(lResultsGrid_MouseClick);

                lResultsGrid.DisplayLayout.ScrollBarLook.ViewStyle = Infragistics.Win.UltraWinScrollBar.ScrollBarViewStyle.Outlook2007;
                lResultsGrid.DisplayLayout.Override.BorderStyleCell = Infragistics.Win.UIElementBorderStyle.None;
                lResultsGrid.DisplayLayout.Override.BorderStyleHeader = Infragistics.Win.UIElementBorderStyle.None;
                lResultsGrid.DisplayLayout.Override.BorderStyleRow = Infragistics.Win.UIElementBorderStyle.None;
                lResultsGrid.DisplayLayout.Override.CellAppearance.BorderColor = System.Drawing.Color.Transparent;

                lResultsGrid.DataSource = ReportDataDrilldown(aRowLabel);                
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
            }

            return lResultsGrid;
        }        

        void lResultsGrid_MouseClick(object sender, MouseEventArgs e)
        {
            UltraGrid grid = sender as UltraGrid;
            SortIPAddressColumn(grid);            
        }

        void lResultsGrid_BeforeRowFilterChanged(object sender, BeforeRowFilterChangedEventArgs e)
        {
            // Trap for DateTime columns.
            //if (e.NewColumnFilter.Column.DataType == typeof(DateTime))
            //{
            // Store the original filters in an array.
            object[] originalFilterConditions = e.NewColumnFilter.FilterConditions.All;

            // Clear the filters.
            e.NewColumnFilter.FilterConditions.Clear();

            // Now loop through the original filters and replace them with a DateFilterCondition
            // for each one. The DateFilterCondition is a custom FilterCondition class that
            // only compare the Date and ignores the time.
            for (int i = 0; i < originalFilterConditions.Length; i++)
            {
                FilterCondition originalFilterCondition = (FilterCondition)originalFilterConditions[i];
                e.NewColumnFilter.FilterConditions.Add(new DateFilterCondition(originalFilterCondition));
            }
            //}
        }

        private UltraChart CreateNewBarChart()
        {
            UltraChart lBarChart = new UltraChart();

            try
            {
                lBarChart.Dock = DockStyle.Fill;
                lBarChart.ChartType = Infragistics.UltraChart.Shared.Styles.ChartType.BarChart;

                Infragistics.UltraChart.Resources.Appearance.ChartTextAppearance chartTextAppearance = new Infragistics.UltraChart.Resources.Appearance.ChartTextAppearance();

                chartTextAppearance.ChartTextFont = new System.Drawing.Font("Verdana", 7F);
                chartTextAppearance.Column = 0;
                chartTextAppearance.ItemFormatString = " <ITEM_LABEL> ";
                chartTextAppearance.Row = -2;
                chartTextAppearance.VerticalAlign = StringAlignment.Center;
                chartTextAppearance.HorizontalAlign = StringAlignment.Near;
                chartTextAppearance.Visible = false;
                lBarChart.BarChart.ChartText.Add(chartTextAppearance);
                lBarChart.Tooltips.Overflow = TooltipOverflow.ChartArea;

                lBarChart.Axis.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(248)))), ((int)(((byte)(220)))));
                lBarChart.Axis.X.Labels.Font = new System.Drawing.Font("Verdana", 7F);
                lBarChart.Axis.X.Labels.FontColor = System.Drawing.Color.DimGray;
                lBarChart.Axis.X.Labels.HorizontalAlign = System.Drawing.StringAlignment.Far;
                lBarChart.Axis.X.Labels.ItemFormatString = "<DATA_VALUE:0.##>";
                lBarChart.Axis.X.Labels.Layout.Behavior = Infragistics.UltraChart.Shared.Styles.AxisLabelLayoutBehaviors.None;
                lBarChart.Axis.X.Labels.Orientation = Infragistics.UltraChart.Shared.Styles.TextOrientation.Horizontal;
                lBarChart.Axis.X.Labels.SeriesLabels.Font = new System.Drawing.Font("Verdana", 7F);
                lBarChart.Axis.X.Labels.SeriesLabels.FontColor = System.Drawing.Color.DimGray;
                lBarChart.Axis.X.Labels.SeriesLabels.FormatString = "";
                lBarChart.Axis.X.Labels.SeriesLabels.HorizontalAlign = System.Drawing.StringAlignment.Far;
                lBarChart.Axis.X.Labels.SeriesLabels.Layout.Behavior = Infragistics.UltraChart.Shared.Styles.AxisLabelLayoutBehaviors.Auto;
                lBarChart.Axis.X.Labels.SeriesLabels.Orientation = Infragistics.UltraChart.Shared.Styles.TextOrientation.Horizontal;
                lBarChart.Axis.X.Labels.SeriesLabels.VerticalAlign = System.Drawing.StringAlignment.Center;
                lBarChart.Axis.X.Labels.VerticalAlign = System.Drawing.StringAlignment.Center;
                lBarChart.Axis.X.LineThickness = 1;
                lBarChart.Axis.X.MajorGridLines.AlphaLevel = ((byte)(255));
                lBarChart.Axis.X.MajorGridLines.Color = System.Drawing.Color.Gainsboro;
                lBarChart.Axis.X.MajorGridLines.DrawStyle = Infragistics.UltraChart.Shared.Styles.LineDrawStyle.Dot;
                lBarChart.Axis.X.MajorGridLines.Visible = true;
                lBarChart.Axis.X.MinorGridLines.AlphaLevel = ((byte)(255));
                lBarChart.Axis.X.MinorGridLines.Color = System.Drawing.Color.LightGray;
                lBarChart.Axis.X.MinorGridLines.DrawStyle = Infragistics.UltraChart.Shared.Styles.LineDrawStyle.Dot;
                lBarChart.Axis.X.MinorGridLines.Visible = false;
                lBarChart.Axis.X.TickmarkInterval = 40;
                lBarChart.Axis.X.TickmarkStyle = Infragistics.UltraChart.Shared.Styles.AxisTickStyle.Smart;
                lBarChart.Axis.X.Visible = true;

                lBarChart.Axis.Y.Labels.ItemFormatString = String.Empty;

                lBarChart.Axis.Y.Margin.Far.MarginType = Infragistics.UltraChart.Shared.Styles.LocationType.Pixels;
                lBarChart.Axis.X.Margin.Far.MarginType = Infragistics.UltraChart.Shared.Styles.LocationType.Pixels;
                lBarChart.Axis.Y.Margin.Far.Value = 40;
                lBarChart.Axis.X.Margin.Far.Value = 40;

                lBarChart.Axis.X.Extent = 40;
                lBarChart.Axis.Y.Extent = 30;

                //lBarChart.Axis.Y.Labels.SeriesLabels.Layout.Behavior = Infragistics.UltraChart.Shared.Styles.AxisLabelLayoutBehaviors.Auto;

                //lBarChart.Axis.Y.Labels.SeriesLabels.OrientationAngle = 60;
                //lBarChart.Axis.Y.Labels.SeriesLabels.Orientation = Infragistics.UltraChart.Shared.Styles.TextOrientation.Custom;
                //lBarChart.Axis.Y.Labels.SeriesLabels.HorizontalAlign = System.Drawing.StringAlignment.Near;
                //lBarChart.Axis.Y.Labels.SeriesLabels.VerticalAlign = System.Drawing.StringAlignment.Center;

                //lBarChart.Axis.Y.Labels.SeriesLabels.Font = new System.Drawing.Font("Verdana", 7F);
                //lBarChart.Axis.Y.Labels.SeriesLabels.FontColor = System.Drawing.Color.DimGray;
                lBarChart.Axis.Y.Labels.SeriesLabels.Visible = false;

                // title
                lBarChart.TitleBottom.Visible = false;
                lBarChart.TitleTop.Font = new System.Drawing.Font("Verdana", 12.75F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Regular))));
                lBarChart.TitleTop.HorizontalAlign = System.Drawing.StringAlignment.Center;
                lBarChart.TitleTop.Text = _selectedReport;

                // tooltip
                lBarChart.Tooltips.Font = new System.Drawing.Font("Verdana", 7.75F);
                lBarChart.Tooltips.FormatString = " <SERIES_LABEL> (<DATA_VALUE>) ";
                lBarChart.Tooltips.HighlightFillColor = System.Drawing.Color.LightBlue;
                lBarChart.Tooltips.HighlightOutlineColor = System.Drawing.Color.LightBlue;

                // colours
                lBarChart.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Center;
                lBarChart.Border.Color = System.Drawing.Color.FromArgb(((int)(((byte)(170)))), ((int)(((byte)(173)))), ((int)(((byte)(187)))));

                lBarChart.ColorModel.AlphaLevel = ((byte)(255));
                lBarChart.ColorModel.ColorBegin = System.Drawing.Color.FromArgb(151, 189, 100);
                lBarChart.ColorModel.ColorEnd = System.Drawing.Color.FromArgb(151, 189, 100);
                lBarChart.ColorModel.ModelStyle = Infragistics.UltraChart.Shared.Styles.ColorModels.DataValueLinearRange;
                lBarChart.ColorModel.Scaling = Infragistics.UltraChart.Shared.Styles.ColorScaling.Increasing;

                lBarChart.Data.UseRowLabelsColumn = false;
                lBarChart.EmptyChartText = "";

                lBarChart.ChartDataClicked += new Infragistics.UltraChart.Shared.Events.ChartDataClickedEventHandler(this.chartAssetStates_ChartDataClicked);

                DataTable reportData = GetChartData();

                lBarChart.Axis.X.RangeType = Infragistics.UltraChart.Shared.Styles.AxisRangeType.Custom;

                double yMax = 0;

                foreach (DataRow row in reportData.Rows)
                {
                    double value = Math.Abs(Convert.ToDouble(row.ItemArray[1]));

                    if (value > yMax)
                        yMax = value;
                }

                lBarChart.Axis.X.RangeMax = yMax;

                if (_selectedReport.StartsWith("Over/Under Licensed by Publisher"))
                    lBarChart.Axis.X.RangeMin = yMax * -1;
                else
                    lBarChart.Axis.X.RangeMin = 0;

                lBarChart.DataSource = reportData;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
            }

            return lBarChart;
        }

        private UltraChart CreateNewStackColumnChart()
        {
            UltraChart lStackColumnChart = new UltraChart();

            try
            {
                lStackColumnChart.Dock = DockStyle.Fill;
                lStackColumnChart.ChartType = ChartType.StackColumnChart;

                lStackColumnChart.ColumnChart.SeriesSpacing = 1;

                Infragistics.UltraChart.Resources.Appearance.ChartTextAppearance chartTextAppearance = new Infragistics.UltraChart.Resources.Appearance.ChartTextAppearance();
                Infragistics.UltraChart.Resources.Appearance.StackAppearance stackAppearance = new Infragistics.UltraChart.Resources.Appearance.StackAppearance();

                chartTextAppearance.ChartTextFont = new System.Drawing.Font("Verdana", 7F);
                chartTextAppearance.Column = 0;
                chartTextAppearance.ItemFormatString = "<DATA_VALUE:00.00>";
                chartTextAppearance.Row = -2;
                chartTextAppearance.VerticalAlign = StringAlignment.Center;
                chartTextAppearance.HorizontalAlign = StringAlignment.Near;
                lStackColumnChart.BarChart.ChartText.Add(chartTextAppearance);

                lStackColumnChart.Axis.BackColor = Color.White;
                lStackColumnChart.Tooltips.Overflow = TooltipOverflow.ChartArea;

                lStackColumnChart.Axis.Y.Labels.Font = new Font("Verdana", 7F);
                lStackColumnChart.Axis.Y.Labels.FontColor = Color.DimGray;
                lStackColumnChart.Axis.Y.Labels.HorizontalAlign = StringAlignment.Far;
                lStackColumnChart.Axis.Y.Labels.ItemFormatString = "<DATA_VALUE:0.##>";
                lStackColumnChart.Axis.Y.Labels.Layout.Behavior = AxisLabelLayoutBehaviors.Auto;
                lStackColumnChart.Axis.Y.Labels.Orientation = TextOrientation.Horizontal;
                lStackColumnChart.Axis.Y.Labels.SeriesLabels.Font = new Font("Verdana", 7F);
                lStackColumnChart.Axis.Y.Labels.SeriesLabels.FontColor = Color.DimGray;
                lStackColumnChart.Axis.Y.Labels.SeriesLabels.HorizontalAlign = StringAlignment.Center;
                lStackColumnChart.Axis.Y.Labels.SeriesLabels.Layout.Behavior = AxisLabelLayoutBehaviors.Auto;
                lStackColumnChart.Axis.Y.Labels.SeriesLabels.Orientation = TextOrientation.VerticalLeftFacing;
                lStackColumnChart.Axis.Y.Labels.SeriesLabels.VerticalAlign = StringAlignment.Center;
                lStackColumnChart.Axis.Y.Labels.VerticalAlign = StringAlignment.Center;
                lStackColumnChart.Axis.Y.LineThickness = 1;
                lStackColumnChart.Axis.Y.MajorGridLines.AlphaLevel = 255;
                lStackColumnChart.Axis.Y.MajorGridLines.Color = Color.Gainsboro;
                lStackColumnChart.Axis.Y.MajorGridLines.DrawStyle = LineDrawStyle.Solid;
                lStackColumnChart.Axis.Y.MajorGridLines.Visible = true;
                lStackColumnChart.Axis.Y.MinorGridLines.AlphaLevel = 200;
                lStackColumnChart.Axis.Y.MinorGridLines.Color = Color.LightGray;
                lStackColumnChart.Axis.Y.MinorGridLines.DrawStyle = LineDrawStyle.Dot;
                lStackColumnChart.Axis.Y.MinorGridLines.Visible = true;
                lStackColumnChart.Axis.Y.TickmarkInterval = 40;
                lStackColumnChart.Axis.Y.TickmarkStyle = AxisTickStyle.Smart;
                lStackColumnChart.Axis.Y.Visible = true;

                lStackColumnChart.Axis.X.Labels.ItemFormatString = String.Empty;

                lStackColumnChart.Axis.X.Labels.SeriesLabels.Font = new Font("Verdana", 7F);
                lStackColumnChart.Axis.X.Labels.SeriesLabels.FontColor = Color.DimGray;

                lStackColumnChart.Axis.X.Labels.Layout.Behavior = AxisLabelLayoutBehaviors.Auto;
                lStackColumnChart.Axis.Y.Labels.Layout.Behavior = AxisLabelLayoutBehaviors.Auto;

                // title
                lStackColumnChart.TitleBottom.Visible = false;
                lStackColumnChart.TitleTop.Font = new Font("Verdana", 12.75F, FontStyle.Regular);
                lStackColumnChart.TitleTop.HorizontalAlign = StringAlignment.Center;
                lStackColumnChart.TitleTop.Text = _selectedReport;

                lStackColumnChart.Tooltips.Font = new Font("Verdana", 7.75F);
                lStackColumnChart.Tooltips.FormatString = " <SERIES_LABEL>, <ITEM_LABEL>: <DATA_VALUE> ";
                lStackColumnChart.Tooltips.HighlightFillColor = Color.LightBlue;
                lStackColumnChart.Tooltips.HighlightOutlineColor = Color.LightBlue;

                // colours
                lStackColumnChart.BackgroundImageLayout = ImageLayout.Center;
                lStackColumnChart.Border.Color = Color.FromArgb(170, 173, 187);
                lStackColumnChart.ColorModel.AlphaLevel = 255;

                lStackColumnChart.Axis.Y.Margin.Far.MarginType = LocationType.Pixels;
                lStackColumnChart.Axis.X.Margin.Far.MarginType = LocationType.Pixels;
                lStackColumnChart.Axis.Y.Margin.Far.Value = 40;
                lStackColumnChart.Axis.X.Margin.Far.Value = 40;

                lStackColumnChart.Axis.X.Extent = 40;
                lStackColumnChart.Axis.Y.Extent = 30;

                // use different colour depending on report type
                lStackColumnChart.ColorModel.ColorBegin = _selectedReport == "Under-Licensed Applications" ? Color.FromArgb(211, 78, 78) : Color.FromArgb(151, 189, 100);

                lStackColumnChart.ColorModel.ModelStyle = ColorModels.Office2007Style;
                lStackColumnChart.ColorModel.Scaling = ColorScaling.Decreasing;

                lStackColumnChart.Data.UseRowLabelsColumn = false;
                lStackColumnChart.EmptyChartText = "";

                lStackColumnChart.ChartDataClicked += chartAssetStates_ChartDataClicked;
                lStackColumnChart.InvalidDataReceived += lColumnChart_InvalidDataReceived;

                lStackColumnChart.DataSource = GetChartData();
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
            }

            return lStackColumnChart;
        }

        private UltraChart CreateNewColumnChart()
        {
            UltraChart lColumnChart = new UltraChart();

            try
            {
                lColumnChart.Dock = DockStyle.Fill;
                lColumnChart.ChartType = ChartType.ColumnChart;

                lColumnChart.ColumnChart.SeriesSpacing = 1;
                lColumnChart.ColumnChart.NullHandling = NullHandling.InterpolateSimple;

                Infragistics.UltraChart.Resources.Appearance.ChartTextAppearance chartTextAppearance = new Infragistics.UltraChart.Resources.Appearance.ChartTextAppearance();

                chartTextAppearance.ChartTextFont = new Font("Verdana", 7F);
                chartTextAppearance.Column = 0;
                chartTextAppearance.ItemFormatString = "<DATA_VALUE:00.00>";
                chartTextAppearance.Row = -2;
                chartTextAppearance.VerticalAlign = StringAlignment.Center;
                chartTextAppearance.HorizontalAlign = StringAlignment.Near;
                lColumnChart.BarChart.ChartText.Add(chartTextAppearance);
                lColumnChart.Tooltips.Overflow = TooltipOverflow.ChartArea;

                lColumnChart.Axis.Y.Labels.Font = new Font("Verdana", 7F);
                lColumnChart.Axis.Y.Labels.FontColor = Color.DimGray;
                lColumnChart.Axis.Y.Labels.HorizontalAlign = StringAlignment.Far;
                lColumnChart.Axis.Y.Labels.ItemFormatString = "<DATA_VALUE:0.##>";
                lColumnChart.Axis.Y.Labels.Layout.Behavior = AxisLabelLayoutBehaviors.Auto;
                lColumnChart.Axis.Y.Labels.Orientation = TextOrientation.Horizontal;
                lColumnChart.Axis.Y.Labels.SeriesLabels.Font = new Font("Verdana", 7F);
                lColumnChart.Axis.Y.Labels.SeriesLabels.FontColor = Color.DimGray;
                lColumnChart.Axis.Y.Labels.SeriesLabels.HorizontalAlign = StringAlignment.Center;
                lColumnChart.Axis.Y.Labels.SeriesLabels.Layout.Behavior = AxisLabelLayoutBehaviors.Auto;
                lColumnChart.Axis.Y.Labels.SeriesLabels.Orientation = TextOrientation.VerticalLeftFacing;
                lColumnChart.Axis.Y.Labels.SeriesLabels.VerticalAlign = StringAlignment.Center;
                lColumnChart.Axis.Y.Labels.VerticalAlign = StringAlignment.Center;
                lColumnChart.Axis.Y.LineThickness = 1;
                lColumnChart.Axis.Y.MajorGridLines.AlphaLevel = 255;
                lColumnChart.Axis.Y.MajorGridLines.Color = Color.Gainsboro;
                lColumnChart.Axis.Y.MajorGridLines.DrawStyle = LineDrawStyle.Solid;
                lColumnChart.Axis.Y.MajorGridLines.Visible = true;
                lColumnChart.Axis.Y.MinorGridLines.AlphaLevel = 200;
                lColumnChart.Axis.Y.MinorGridLines.Color = Color.LightGray;
                lColumnChart.Axis.Y.MinorGridLines.DrawStyle = LineDrawStyle.Dot;
                lColumnChart.Axis.Y.MinorGridLines.Visible = true;
                lColumnChart.Axis.Y.TickmarkInterval = 40;
                lColumnChart.Axis.Y.TickmarkStyle = AxisTickStyle.Smart;
                lColumnChart.Axis.Y.Visible = true;

                lColumnChart.Axis.X.Labels.ItemFormatString = String.Empty;

                lColumnChart.Axis.X.Labels.Layout.Behavior = AxisLabelLayoutBehaviors.Auto;
                lColumnChart.Axis.Y.Labels.Layout.Behavior = AxisLabelLayoutBehaviors.Auto;

                // title
                lColumnChart.TitleBottom.Visible = false;
                lColumnChart.TitleTop.Font = new Font("Verdana", 12.75F, FontStyle.Regular);
                lColumnChart.TitleTop.HorizontalAlign = StringAlignment.Center;
                lColumnChart.TitleTop.Text = _selectedReport;

                // colours
                lColumnChart.BackgroundImageLayout = ImageLayout.Center;
                lColumnChart.Border.Color = Color.FromArgb(170, 173, 187);

                lColumnChart.ColorModel.AlphaLevel = 255;
                lColumnChart.ColorModel.ColorBegin = Color.FromArgb(151, 189, 100);
                lColumnChart.ColorModel.ColorEnd = Color.FromArgb(151, 189, 100);
                lColumnChart.ColorModel.ModelStyle = ColorModels.DataValueLinearRange;
                lColumnChart.ColorModel.Scaling = ColorScaling.Increasing;

                lColumnChart.Data.UseRowLabelsColumn = false;

                // tooltips
                lColumnChart.Tooltips.Font = new Font("Verdana", 7.75F);
                lColumnChart.Tooltips.FormatString = " <SERIES_LABEL> (<DATA_VALUE>) ";
                lColumnChart.Tooltips.HighlightFillColor = Color.LightBlue;
                lColumnChart.Tooltips.HighlightOutlineColor = Color.LightBlue;

                lColumnChart.Axis.X.Labels.SeriesLabels.Font = new Font("Verdana", 7F);
                lColumnChart.Axis.X.Labels.SeriesLabels.FontColor = Color.DimGray;

                lColumnChart.ChartDataClicked += this.chartAssetStates_ChartDataClicked;
                lColumnChart.ChartDrawItem += lColumnChart_ChartDrawItem;
                lColumnChart.InvalidDataReceived += lColumnChart_InvalidDataReceived;

                lColumnChart.Axis.Y.Margin.Far.MarginType = LocationType.Pixels;
                lColumnChart.Axis.X.Margin.Far.MarginType = LocationType.Pixels;
                lColumnChart.Axis.Y.Margin.Far.Value = 40;
                lColumnChart.Axis.X.Margin.Far.Value = 40;

                lColumnChart.Axis.X.Extent = 40;
                lColumnChart.Axis.Y.Extent = 30;

                DataTable reportData = GetChartData();

                lColumnChart.Axis.Y.RangeType = AxisRangeType.Custom;

                double yMax = 0;

                foreach (DataRow row in reportData.Rows)
                {
                    double value = Math.Abs(Convert.ToDouble(row.ItemArray[1]));

                    if (value > yMax)
                        yMax = value;
                }

                lColumnChart.Axis.Y.RangeMax = yMax;

                if (_selectedReport.StartsWith("Over/Under Licensed by Publisher"))
                    lColumnChart.Axis.Y.RangeMin = yMax * -1;
                else
                    lColumnChart.Axis.Y.RangeMin = 0;


                lColumnChart.DataSource = reportData;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
            }

            return lColumnChart;
        }

        private UltraChart CreateNewPieChart3D()
        {
            UltraChart lPieChart3D = new UltraChart();

            try
            {
                lPieChart3D.Dock = DockStyle.Fill;
                lPieChart3D.ChartType = ChartType.PieChart3D;
                lPieChart3D.Tooltips.Overflow = TooltipOverflow.ChartArea;

                Infragistics.UltraChart.Resources.Appearance.PieChartAppearance pieChartAppearance = new Infragistics.UltraChart.Resources.Appearance.PieChartAppearance();

                pieChartAppearance.BreakAllSlices = true;
                pieChartAppearance.BreakDistancePercentage = 10;

                Infragistics.UltraChart.Resources.Appearance.ChartTextAppearance chartTextAppearance = new Infragistics.UltraChart.Resources.Appearance.ChartTextAppearance();

                chartTextAppearance.ChartTextFont = new Font("Verdana", 12F);
                chartTextAppearance.Column = -2;
                chartTextAppearance.ItemFormatString = "<DATA_VALUE:00.00>";
                chartTextAppearance.Row = -2;
                pieChartAppearance.ChartText.Add(chartTextAppearance);

                pieChartAppearance.Labels.LeaderLinesVisible = true;
                pieChartAppearance.Labels.Visible = true;
                pieChartAppearance.Labels.Format = PieLabelFormat.Custom;
                pieChartAppearance.Labels.FormatString = " <ITEM_LABEL> (<DATA_VALUE>) ";
                pieChartAppearance.Labels.Font = new Font("Verdana", 8F, FontStyle.Regular);

                pieChartAppearance.OthersCategoryPercent = 0;
                lPieChart3D.PieChart3D = pieChartAppearance;

                // title
                lPieChart3D.TitleBottom.Visible = false;
                lPieChart3D.TitleTop.Font = new Font("Verdana", 12.75F, FontStyle.Regular);
                lPieChart3D.TitleTop.HorizontalAlign = StringAlignment.Center;
                lPieChart3D.TitleTop.Text = _selectedReport;

                // tooltips
                lPieChart3D.Tooltips.Font = new Font("Verdana", 7.75F);
                lPieChart3D.Tooltips.FormatString = " <ITEM_LABEL> (<PERCENT_VALUE:0.##>%) ";
                lPieChart3D.Tooltips.HighlightFillColor = Color.LightBlue;
                lPieChart3D.Tooltips.HighlightOutlineColor = Color.DarkGray;

                // colours
                lPieChart3D.BackgroundImageLayout = ImageLayout.Center;
                lPieChart3D.Border.Color = Color.FromArgb(170, 173, 187);
                lPieChart3D.ColorModel.AlphaLevel = 180;
                lPieChart3D.ColorModel.ColorBegin = Color.Yellow;
                lPieChart3D.ColorModel.ColorEnd = Color.Red;
                lPieChart3D.ColorModel.ModelStyle = ColorModels.CustomLinear;
                lPieChart3D.ColorModel.Scaling = ColorScaling.Increasing;

                lPieChart3D.Data.UseRowLabelsColumn = false;
                lPieChart3D.EmptyChartText = "";
                lPieChart3D.Legend.Visible = false;

                Infragistics.UltraChart.Resources.Appearance.View3DAppearance view3DAppearance = new Infragistics.UltraChart.Resources.Appearance.View3DAppearance();

                view3DAppearance.XRotation = 55F;
                view3DAppearance.YRotation = 40F;
                view3DAppearance.Scale = 90;
                view3DAppearance.Perspective = 0F;
                lPieChart3D.Transform3D = view3DAppearance;

                lPieChart3D.InvalidDataReceived += lColumnChart_InvalidDataReceived;

                lPieChart3D.ChartDataClicked += chartAssetStates_ChartDataClicked;
                lPieChart3D.DataSource = GetChartData();
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
            }

            return lPieChart3D;
        }

        private UltraChart CreateNewPieChart()
        {
            UltraChart lPieChart = new UltraChart();

            try
            {
                lPieChart.Dock = DockStyle.Fill;
                lPieChart.ChartType = ChartType.PieChart;
                lPieChart.Tooltips.Overflow = TooltipOverflow.ChartArea;

                Infragistics.UltraChart.Resources.Appearance.PieChartAppearance pieChartAppearance = new Infragistics.UltraChart.Resources.Appearance.PieChartAppearance();

                pieChartAppearance.BreakAllSlices = false;
                pieChartAppearance.BreakAlternatingSlices = false;
                pieChartAppearance.BreakDistancePercentage = 10;

                Infragistics.UltraChart.Resources.Appearance.ChartTextAppearance chartTextAppearance = new Infragistics.UltraChart.Resources.Appearance.ChartTextAppearance();

                chartTextAppearance.ChartTextFont = new Font("Verdana", 7F);
                chartTextAppearance.Column = -2;
                chartTextAppearance.ItemFormatString = "<DATA_VALUE:00.00>";
                chartTextAppearance.Row = -2;
                pieChartAppearance.ChartText.Add(chartTextAppearance);

                pieChartAppearance.Labels.LeaderLinesVisible = true;
                pieChartAppearance.Labels.Visible = true;
                pieChartAppearance.Labels.Font = new Font("Verdana", 8.25F, FontStyle.Regular, GraphicsUnit.Point, 0);
                pieChartAppearance.Labels.FontColor = Color.DimGray;
                pieChartAppearance.Labels.FormatString = "<ITEM_LABEL>  (<DATA_VALUE:#0>)";
                pieChartAppearance.Labels.LeaderLineColor = Color.DimGray;
                pieChartAppearance.RadiusFactor = 85;

                pieChartAppearance.OthersCategoryPercent = 0;
                lPieChart.PieChart3D = pieChartAppearance;

                // title
                lPieChart.TitleBottom.Visible = false;
                lPieChart.TitleTop.Font = new Font("Verdana", 12.75F, FontStyle.Regular);
                lPieChart.TitleTop.HorizontalAlign = StringAlignment.Center;
                lPieChart.TitleTop.Text = _selectedReport;

                // tooltips
                lPieChart.Tooltips.Font = new Font("Verdana", 8.25F, FontStyle.Regular, GraphicsUnit.Point, 0);
                lPieChart.Tooltips.FormatString = "<ITEM_LABEL>";
                lPieChart.Tooltips.HighlightFillColor = Color.LightBlue;
                lPieChart.Tooltips.HighlightOutlineColor = Color.DarkGray;

                // colours
                lPieChart.BackgroundImageLayout = ImageLayout.Center;
                lPieChart.Border.Color = Color.FromArgb(170, 173, 187);
                lPieChart.ColorModel.AlphaLevel = 100;
                lPieChart.ColorModel.ColorBegin = Color.Pink;
                lPieChart.ColorModel.ColorEnd = Color.DarkRed;
                lPieChart.ColorModel.ModelStyle = ColorModels.CustomLinear;
                //lPieChart.ColorModel.Scaling = Infragistics.UltraChart.Shared.Styles.ColorScaling.Increasing;
                Infragistics.UltraChart.Resources.Appearance.GradientEffect gradientEffect1 = new Infragistics.UltraChart.Resources.Appearance.GradientEffect();
                gradientEffect1.Coloring = GradientColoringStyle.Lighten;
                gradientEffect1.Style = Infragistics.UltraChart.Shared.Styles.GradientStyle.BackwardDiagonal;
                lPieChart.Effects.Effects.Add(gradientEffect1);

                lPieChart.Data.UseRowLabelsColumn = false;
                lPieChart.EmptyChartText = "";
                lPieChart.Legend.Visible = false;

                lPieChart.InvalidDataReceived += lColumnChart_InvalidDataReceived;

                lPieChart.ChartDataClicked += chartAssetStates_ChartDataClicked;
                lPieChart.DataSource = GetChartData();
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
            }

            return lPieChart;
        }

        private ComboBox CreateNewComboChartSelector()
        {
            ComboBox newComboBox = new ComboBox();
            newComboBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            newComboBox.Items.AddRange(new object[] { "Pie Chart 3D", "Pie Chart", "Bar Chart", "Column Chart" });
            newComboBox.Location = new System.Drawing.Point(0, 35);
            newComboBox.Name = "cmbChartType1";
            newComboBox.Size = new System.Drawing.Size(121, 21);
            newComboBox.SelectedIndex = 0;
            newComboBox.DropDownStyle = ComboBoxStyle.DropDownList;

            newComboBox.SelectedIndexChanged += new EventHandler(cmbChartType_SelectedIndexChanged);

            return newComboBox;
        }

        #endregion

        #region Event Handlers

        private void cmbChartType_SelectedIndexChanged(object sender, EventArgs e)
        {
            TabPage tabPage = tabControlReport.SelectedTab;
            UltraChart currentChart = null;
            ComboBox currentComboBox = null;

            foreach (Control control in tabPage.Controls)
            {
                if (control.GetType() == typeof(UltraChart))
                    currentChart = (UltraChart)control;
                else if (control.GetType() == typeof(ComboBox))
                    currentComboBox = (ComboBox)control;
            }

            _selectedReport = currentChart.TitleTop.Text;
            tabControlReport.SelectedTab.Controls.Remove(currentChart);

            if (currentChart != null && currentComboBox != null)
            {
                switch (currentComboBox.SelectedIndex)
                {
                    case 0:
                        currentChart = CreateNewPieChart3D();
                        break;
                    case 1:
                        currentChart = CreateNewPieChart();
                        break;
                    case 2:
                        currentChart = CreateNewBarChart();
                        break;
                    case 3:
                        currentChart = CreateNewColumnChart();
                        break;
                    default:
                        currentChart = CreateNewPieChart3D();
                        break;
                }

                tabControlReport.SelectedTab.Controls.Add(currentChart);
            }
        }

        private void chartAssetStates_ChartDataClicked(object sender, Infragistics.UltraChart.Shared.Events.ChartDataEventArgs e)
        {
            this.Cursor = Cursors.WaitCursor;
            CreateDrillDownGrid(e.RowLabel);
            this.Cursor = Cursors.Default;
        }

        private void lResultsGridAsset_DoubleClickRow(object sender, DoubleClickRowEventArgs e)
        {
            int lIndex = e.Row.Cells.IndexOf("Asset Name");

            if (lIndex != -1)
            {
                string assetName = e.Row.Cells[lIndex].Value.ToString();

                List<WorkItem> workItemList = (List<WorkItem>)workItem.RootWorkItem.WorkItems.FindByType(typeof(NetworkWorkItem));
                NetworkWorkItem netDiscWorkItem = workItemList[0] as NetworkWorkItem;
                NetworkWorkItemController controller = netDiscWorkItem.Controller as NetworkWorkItemController;

                NetworkExplorerView explorerView = (NetworkExplorerView)netDiscWorkItem.ExplorerView;
                Infragistics.Win.UltraWinTree.UltraTree explorerTree = explorerView.GetDisplayedTree;

                Infragistics.Win.UltraWinTree.UltraTreeNode rootNode = explorerTree.Nodes[0];
                Infragistics.Win.UltraWinTree.UltraTreeNode selectedNode = AddMatches(rootNode, assetName);

                if (selectedNode != null)
                {
                    selectedNode.BringIntoView();
                    explorerTree.SelectedNodes.Clear();

                    selectedNode.ExpandAll();
                    selectedNode.Selected = true;

                    controller.ActivateWorkItem();
                }
            }
        }

        private Infragistics.Win.UltraWinTree.UltraTreeNode AddMatches(Infragistics.Win.UltraWinTree.UltraTreeNode parentNode, string assetName)
        {
            foreach (Infragistics.Win.UltraWinTree.UltraTreeNode childNode in parentNode.Nodes)
            {
                // If this node represents an asset group then we should check it's children first
                if (childNode.Tag is AssetGroup)
                {
                    // If this branch is not currently expanded then we need to expand it now 
                    // in order to search it
                    bool currentState = childNode.Expanded;
                    //
                    if (!childNode.Expanded)
                        childNode.Expanded = true;
                    //	
                    Infragistics.Win.UltraWinTree.UltraTreeNode foundNode = AddMatches(childNode, assetName);
                    if (foundNode != null)
                        return foundNode;

                    // Contract the branch if it was NOT previously expanded
                    if (!currentState)
                        childNode.Expanded = false;
                }

                else if (childNode.Tag is Asset)
                {
                    Asset thisAsset = childNode.Tag as Asset;
                    string upperAssetname = thisAsset.Name.ToUpper();
                    //
                    if (upperAssetname.Equals(assetName))
                        return childNode;
                }
            }

            return null;
        }

        private void lResultsGrid_DoubleClickRow(object sender, DoubleClickRowEventArgs e)
        {
            if (ultraGridSummary.Selected.Rows.Count == 1)
            {
                CreateDrillDownGrid(((System.Data.DataRowView)(ultraGridSummary.Selected.Rows[0].ListObject)).Row.ItemArray[0].ToString());
            }
        }

        private void CreateDrillDownGrid(string dataValue)
        {
            TabPage dataTabPage = new TabPage(_selectedReport + " - Data View");
            dataTabPage.Enter += new EventHandler(dataTabPage_Enter);

            //if (Control.ModifierKeys != Keys.Control)
            //{
            //    foreach (TabPage tabPage in tabControlReport.TabPages)
            //    {
            //        tabControlReport.TabPages.Remove(tabPage);
            //    }
            //}

            dataTabPage.Controls.Add(CreateNewGrid(dataValue));
            dataTabPage.ContextMenuStrip = resultsMenuStrip;
            tabControlReport.TabPages.Add(dataTabPage);
            tabControlReport.SelectedTab = dataTabPage;

            if (_selectedReport.EndsWith("Data View"))
            {
                ultraGridSummary.DataSource = null;
            }

            paneUltraGrid.Close();
        }

        private void closeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            tabControlReport.TabPages.Remove(tabControlReport.SelectedTab);

            if (tabControlReport.TabPages.Count == 0)
                paneUltraGrid.Close();
        }

        private void closeAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TabPage selectedTab = tabControlReport.SelectedTab;

            foreach (TabPage tabPage in tabControlReport.TabPages)
            {
                if (tabPage != selectedTab)
                    tabControlReport.TabPages.Remove(tabPage);
            }
        }

        private void closeAllTabsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            foreach (TabPage tabPage in tabControlReport.TabPages)
            {
                tabControlReport.TabPages.Remove(tabPage);
            }

            paneUltraGrid.Close();
        }

        private bool TabPageContainsChart(TabPage tabPage)
        {
            foreach (Control c in tabPage.Controls)
            {
                if (c as UltraChart != null)
                    return true;
            }

            return false;
        }

        void dataTabPage_Enter(object sender, EventArgs e)
        {
            TabPage currentTabpage = sender as TabPage;

            if (currentTabpage == null) return;

            if (TabPageContainsChart(currentTabpage))
                paneUltraGrid.Show();
            else
                paneUltraGrid.Close();

            string currentReport = tabControlReport.SelectedTab.Text;

            if (_selectedReport != currentReport)
            {
                _selectedReport = currentReport;

                if (_selectedReport != "Compliance Report")
                    GetChartData();
                else
                    ultraGridSummary.DataSource = new StatisticsDAO().StatisticsComplianceOverview(_lastCompliantIds);
            }

            //if ((currentReport.EndsWith("Data View")) ||
            //    (currentReport.StartsWith("License Keys by Publisher")) ||
            //    (currentReport.StartsWith("Audit Trail History")) ||
            //    (currentReport.StartsWith("Custom Report")) ||
            //    (currentReport.StartsWith("SQL Report")) ||
            //    (currentReport.StartsWith("Application Licensing Report")))
            //{
            //    paneUltraGrid.Close();
            //}
            //else
            //{
            //    paneUltraGrid.Show();
            //}
        }

        void lColumnChart_InvalidDataReceived(object sender, Infragistics.UltraChart.Shared.Events.ChartDataInvalidEventArgs e)
        {
            Infragistics.UltraChart.Shared.Styles.LabelStyle ls = new Infragistics.UltraChart.Shared.Styles.LabelStyle();
            ls.FontColor = Color.DarkGray;

            Font font = new Font("Verdana", 12.75F, FontStyle.Italic);

            ls.Font = font;
            ls.VerticalAlign = StringAlignment.Center;
            ls.HorizontalAlign = StringAlignment.Center;

            e.LabelStyle = ls;
            e.Text = "No results were returned for this report.";
        }

        void lColumnChart_ChartDrawItem(object sender, Infragistics.UltraChart.Shared.Events.ChartDrawItemEventArgs e)
        {
            if ((e.Primitive.GetType() == typeof(Infragistics.UltraChart.Core.Primitives.Box)) && e.HasData)
            {
                if (e.Primitive.Value != null && (double)e.Primitive.Value < 0)
                    e.Primitive.PE.Fill = Color.FromArgb(211, 78, 78);
            }
        }

        #endregion
    }
}
